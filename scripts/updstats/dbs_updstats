#!/bin/sh
# Copyright (c) 2001-2016 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision: 2.0.39 $
# $Date: 2018-04-03 17:28:33 $
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.
# This script runs the tbl_updstats script for each table in the database

PROGNAME=`basename $0`
VERSION=`echo "$Revision: 2.0.39 $" | cut -f2 -d' '`

show_help()
{
	printf "${PROGNAME}: -V | -h | { -d database } [ -f filter ] [ -e |  -E file] [ -p priority ]\n[ -P | -N ] [ -m size ] [ -r resolution ] [ -c confidence ] [ -R resolution ] [ -T ] [ -s ] [-l ] [ -x | -X ] [ -y ] [ -z | -Z ] [ -F | -S {stat_change} ] [ -i | -I {table_list_file} ]\n"
	echo "               {-d database} (required)"
	echo "               [-f filter ] Additional filters to restrict tables"
	echo "               [-h] Show help and exit"
	echo "               [-V] Show version and exit"
	echo "               [-e] Set explain on (versions >= 7.31.UD2 and 9.30.UC2)"
	echo "               [-i table_list_file] run for the tables contained in file"
	echo "               [-I table_list_file] run without the tables contained in file"
	echo "               [-E file] Set explain to a file (versions >= 11.10)"
	echo "               [-p priority] Set pdqpriority (versions >= 7.31.UD2 and 9.30.UC2)"
	echo "               [-P] Updates statistics for procedures also (default without filter)"
	echo "               [-N] Don't update statistics for procedures (default with filter)"
	echo "               [-r resolution] Set resolution for MEDIUM distributions"
	echo "               [-c confidence] Set confidence"
	echo "               [-m size] Set minimum sample size (versions >= 11.10)"
	echo "               [-R resolution] Set resolution for HIGH distributions"
	echo "               [-l] Use quick LOW mode (Avoid b-tree leaf scan. Only minimal table info is collected)"
	echo "               [-T] Include timings"
	echo "               [-s] Include system catalog tables"
	echo "               [-x] Option for tbl_updstats. Display only. Do not execute"
	echo "               [-X] Option for tbl_updstats. Display and execute"
	echo "               [-z] Display only. Do not execute"
	echo "               [-Z] Display and execute"
	echo "               [-y] Allow multiple parallel executions"
	echo "               [-o] Specify user for tbl_updstats (ANSI databases)"
	echo "               [-w N ] Set LOCK MODE WAIT N seconds"
	echo "               [-F] to force statistics even if AUTO_STAT_MODE is on"
	echo "               [-S stat_change] to define a STATCHANGE value and work in AUTO mode"
	echo "Ex: dbs_updstats -d stores7 -f \\\" and tabname like \\'l%\\'\\\""
}

get_args()
{
	arg_ok='p:d:f:m:r:R:c:E:lePNVhTsyxXzZow:i:I:FS:'
        while getopts ${arg_ok} OPTION
        do
                case ${OPTION} in
		h)   # show help
			show_help
			exit 0
			;;
		V)   # show version
			echo "${PROGNAME} version ${VERSION}" >&1
			exit 0
			;;
		E)   # set up the -E (set explain flag with file..)
			EXPLAIN_FLAG=2
			explain_file=${OPTARG}
			;;
		z)   # set up the -zZ (set DISPLAY flag)
			DISPLAY_FLAG=1
			;;
		Z)   # set up the -zZ (set DISPLAY flag)
			DISPLAY_FLAG=2
			;;
		x|X)   # set up the -xX (set CMD_DISPLAY flag)
			CMD_DISPLAY_FLAG=-${OPTION}
			;;
		i|I)   # include/exclude tables from file
			TABLE_LIST_FILENAME=${OPTARG}
			if [ ! -r ${TABLE_LIST_FILENAME} ]
			then
				echo "File to include/exclude tables ($TABLE_LIST_FILENAME) cannot be read!\n" >&2
				return -1
			fi
			TABLE_LIST_FLAG=${OPTION}
			TABLE_LIST_FILTER_NUM_COLUMNS=`awk -F',' '{print NF}' ${TABLE_LIST_FILENAME} | sort -u | wc -l | awk '{print $1}'`
			if [ "X${TABLE_LIST_FILTER_NUM_COLUMNS}" != "X1" ]
			then
				echo "The table filter file ($TABLE_LIST_FILENAME) contains lines with different number of columns" >&2
				return -1
			else
				TABLE_LIST_FILTER_NUM_COLUMNS=`head -10 ${TABLE_LIST_FILENAME} | awk -F',' '{print NF}' | sort -u | awk '{print $1}'`
				case $TABLE_LIST_FILTER_NUM_COLUMNS in
				1)
					TABLE_LIST_SCHEMA=0
					;;
				2)
					TABLE_LIST_SCHEMA=1
					;;
				*)
					echo "The table filter file should contain one (table name) or two (table name and schema) columns" >&2
					return 1
				esac
			fi
			;;
		l)   # set up the -l (set quick low mode flag)
			QUICK_LOW_MODE_FLAG=1
			;;
		s)   # set up the -s (set SYSTABLES flag)
			SYSTABLES_FLAG=1
			;;
		y)   # set up the -y (set MULTIPLE flag)
			MULTIPLE_FLAG=1
			;;
		T)   # set up the -T (set TIMINGS flag)
			TIMINGS_FLAG=1
			;;
		e)   # set up the -e (set explain flag)
			EXPLAIN_FLAG=1
			;;
		d)   # set up the -d (database flag)
			DATABASE_FLAG=1
			dbserver=${OPTARG}
			;;
		p)   # set up the -p (pdqpriority flag)
			PRIORITY_FLAG=1
			priority=${OPTARG}
			;;
		P)   # set up the -P (for procedures flag)
			PROCEDURES_FLAG=1
			;;
		N)   # set up the -N (NO procedures flag)
			PROCEDURES_FLAG=0
			;;
		m)   # set up the -m (sampling flag)
			SAMPLING_FLAG=1
			sampling=${OPTARG}
			;;
		R)   # set up the -R (resolution high flag)
			RESOLUTION_HIGH_FLAG=1
			resolution_high=${OPTARG}
			;;
		r)   # set up the -r (resolution medium flag)
			RESOLUTION_MEDIUM_FLAG=1
			resolution_medium=${OPTARG}
			;;
		c)   # set up the -c (confidence flag)
			CONFIDENCE_FLAG=1
			confidence=${OPTARG}
			;;
		o)   # set up the -o (ANSI user flag)
			ANSI_USER_FLAG=1
			;;
		F)   # FORCE mode
			if [ "X${STATCHANGE_FLAG}" != "X" ]
			then
				echo "${PROGNAME} Syntax error: Option -F cannot be used with -S" >&2
				return 1
			else
				FORCE_FLAG=1
			fi
			;;
		S)   # STATCHANGE option
			if [ "X${FORCE_FLAG}" != "X" ]
			then
				echo "${PROGNAME} Syntax error: Option -S cannot be used with -F" >&2
				return 1
			else
				STATCHANGE_FLAG=1
				STATCHANGE_VALUE=${OPTARG}
			fi
			;;
		w)   # set up the -w (LOCK WAIT flag)
			LOCK_MODE_FLAG=1
			LOCK_MODE_TIME=${OPTARG}
			echo ${LOCK_MODE_TIME} | grep "^[1-9][0-9]*" >/dev/null
			if [ $? != 0  ]
			then
				echo "${PROGNAME} Syntax error: LOCK WAIT time must be between a number >= 1" >&2
				return 1
			fi
			;;
		f)   # set up the -f (filter flag)
			FILTER_FLAG=1
			case ${OPTARG} in
			\"*)
				sel_filter="`echo $@ | cut -f2 -d'\"' | sed 's/--//'`"
				resto="`echo $* | cut -f3- -d'\"'`"
				;;
			*)
				echo "${PROGNAME} Syntax error: Argument for option '-f' must be enclosed in quotes" >&2
				return 1
			esac
			;;
		?)   # Unlnonw option
			return 1
			;;
		esac
	done
}




#-----------------------------------------------------
# Start of script...
#-----------------------------------------------------

get_args $*
if [ $? != 0 ]
then
	echo "${PROGNAME} Error parsing parameters" >&2
	show_help >&2
	exit 1
fi

until [ ${dbserver} ]
do
  echo -n "Insert the database name: "
  read dbserver
  if [ -z "${dbserver}" ]
  then
    echo '>> You must enter a database name. <<'
    exit 1
  fi
done

#-----------------------------------------------------
# parameter validation
#-----------------------------------------------------
if [ "X${PRIORITY_FLAG}" = "X1" ]
then
	if [ ${priority} -lt 1 -o ${priority} -gt 100 ]
	then
		echo "${PROGNAME} Syntax error: PDQPRIORITY must be between 1 and 100" >&2
		exit 1
	fi
fi


if [ "X${FORCE_FLAG}" = "X1" ]
then
	AUTO_MODE_CLAUSE=" -F "
else
	if [ "X${STATCHANGE_FLAG}" = "X1" ]
	then
		echo ${STATCHANGE_VALUE} | grep '^[0-9]\{1,3\}$' 2>&1 >/dev/null
		RESULT=$?
		if [ ${RESULT} != 0 -o ${STATCHANGE_VALUE} -lt 1 -o ${STATCHANGE_VALUE} -gt 100 ]
		then
			echo "${PROGNAME} Syntax error: STATCHANGE value must be numeric and less than or equal to 100" >&2
			exit 1
		else
			AUTO_MODE_CLAUSE=" -S ${STATCHANGE_VALUE} "
		fi
	else
		AUTO_MODE_CLAUSE=" "
	fi
fi

if [ "X${RESOLUTION_MEDIUM_FLAG}" = "X1" ]
then
	echo ${resolution_medium} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${resolution_medium} -gt 100 ]
	then
		echo "${PROGNAME} Syntax error: RESOLUTION MEDIUM value must be numeric and less than or equal to 100" >&2
		exit 1
	else
		resolution_clause_medium="-r ${resolution_medium} "
	fi
fi

if [ "X${RESOLUTION_HIGH_FLAG}" = "X1" ]
then
	echo ${resolution_high} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${resolution_high} -gt 100 ]
	then
		echo "${PROGNAME} Syntax error: RESOLUTION HIGH value must be numeric and less than or equal to 100" >&2
		exit 1
	else
		resolution_clause_high=" -R ${resolution_high} "
	fi
fi

if [ "X"$SAMPLING_FLAG = "X1" ]
then
	echo ${sampling} | grep '^[0-9][0-9]*$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${sampling} -lt 1 ]
	then
		echo "${PROGNAME} Syntax error: SAMPLING value must be numeric and greater than 0" >&2
		exit 1
	else
		sampling_clause="-m ${sampling} "
	fi
fi

if [ "X${CONFIDENCE_FLAG}" = "X1" ]
then
	echo ${confidence} | grep "0\.[89][0-9]*" 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 ]
	then
		echo "${PROGNAME} Syntax error: CONFIDENCE must be between 0.80 and 0.99" >&2
		exit 1
	else
		confidence_clause="-c ${confidence} "
	fi
fi

if [ "X${QUICK_LOW_MODE_FLAG}" = "X1" ]
then
	low_mode_flag="-l "
fi

if [ "X"$PROCEDURES_FLAG = "X" ]
then
	if [ "X"$FILTER_FLAG != "X1" ]
	then
		PROCEDURES_FLAG=1
	else
		PROCEDURES_FLAG=0
	fi
fi

#-----------------------------------------------------
# Filename definitions
#-----------------------------------------------------
DBS_DATABASE_LOCK_FILE=/tmp/${PROGNAME}_${DATABASE}.lck
TABLE_LIST_FILE=/tmp/${PROGNAME}_$$_table_list
SQL_ERROR_FILE=/tmp/${PROGNAME}_$$_sql_error
SQL_OUTPUT_FILE=/tmp/${PROGNAME}_$$_sql_out
EXPLAIN_TMP_FILE=/tmp/${PROGNAME}_$$_tmp_explain

#-----------------------------------------------------
# Setting up cleanup
#-----------------------------------------------------
clean_up()
{
	rm -f ${DBS_DATABASE_LOCK_FILE} ${TABLE_LIST_FILE} ${SQL_ERROR_FILE} ${EXPLAIN_TMP_FILE} ${SQL_OUTPUT_FILE}
}

trap clean_up 0


#-----------------------------------------------------
# Check to see if only script for this database
#-----------------------------------------------------
if [ -r "${DBS_DATABASE_LOCK_FILE}*" ]
then
	if  [ "X${MULTIPLE_FLAG}" != "X1" ]
	then
		echo "There is another ${PROGNAME} running for the same database or there was an error on a previous executions">&2
		echo "Remove the file ${DBS_DATABASE_LOCK_FILE} or use the -y flag and try again" >&2
		exit 1
	else
		DBS_DATABASE_LOCK_FILE=/tmp/${PROGNAME}_${DATABASE}.lck_$$
	fi
fi
echo $$ > ${DBS_DATABASE_LOCK_FILE}

#-----------------------------------------------------
# Set up table filter
#-----------------------------------------------------

FROM_FILTER_CLAUSE=""
TABLE_LIST_TABLE_CLAUSE=""
if [ "X${TABLE_LIST_FLAG}" != "X" ]
then
	TEMP_TABLE="tmp_tab_list"
	case $TABLE_LIST_FLAG in
	i)
		if [ $TABLE_LIST_SCHEMA = 0 ]
		then
			TABLE_LIST_SQL="t.tabname = t1.tabname AND "
			TABLE_LIST_CREATE_SQL="CREATE TEMP TABLE $TEMP_TABLE ( tabname char(128) ); LOAD FROM $TABLE_LIST_FILENAME DELIMITER ',' INSERT INTO $TEMP_TABLE;"
		else
			TABLE_LIST_SQL="t.tabname = t1.tabname AND t.owner = t1.owner AND "
			TABLE_LIST_CREATE_SQL="CREATE TEMP TABLE $TEMP_TABLE ( tabname char(128), owner CHAR(32) ); LOAD FROM $TABLE_LIST_FILENAME DELIMITER ',' INSERT INTO $TEMP_TABLE;"
		fi
		FROM_FILTER_CLAUSE=", $TEMP_TABLE t1"
		;;
	I)
		if [ $TABLE_LIST_SCHEMA = 0 ]
		then
			TABLE_LIST_SQL="NOT EXISTS (SELECT 1 FROM $TEMP_TABLE t1 WHERE t.tabname = t1.tabname ) AND "
			TABLE_LIST_CREATE_SQL="CREATE TEMP TABLE $TEMP_TABLE ( tabname char(128) ); LOAD FROM $TABLE_LIST_FILENAME DELIMITER ',' INSERT INTO $TEMP_TABLE;"
		else
			TABLE_LIST_SQL="NOT EXISTS (SELECT 1 FROM $TEMP_TABLE t1 WHERE t.tabname = t1.tabname AND t1.owner = t.owner) AND "
			TABLE_LIST_CREATE_SQL="CREATE TEMP TABLE $TEMP_TABLE ( tabname char(128), owner CHAR(32) ); LOAD FROM $TABLE_LIST_FILENAME DELIMITER ',' INSERT INTO $TEMP_TABLE;"
		fi
		;;
	esac
else
	echo "DEBUG: TABLE_LIST_FLAG: ${TABLE_LIST_FLAG} "
	TABLE_LIST_SQL=""
fi

if [ "X${SYSTABLES_FLAG}" != "X1" ]
then
	sel_filter="$TABLE_LIST_SQL t.tabid > 99 and t.tabtype = 'T' $sel_filter"
else
	sel_filter="$TABLE_LIST_SQL t.tabname not like ' %' and t.tabtype = 'T' $sel_filter"
fi


#-----------------------------------------------------
# obtain table list
#-----------------------------------------------------
if [ "X$SET_AUTH_FLAG" = "X1" ]
then
	SET_AUTH_CLAUSE="SET SESSION AUTHORIZATION TO '${SET_AUTH_USER}';"
else
	SET_AUTH_CLAUSE=""
fi

LOGGING_FLAGS=`dbaccess sysmaster - <<EOSQL 2>${SQL_ERROR_FILE} | grep "LOGGING:" | awk '{print $NF}' 
SELECT 'LOGGING: '|| is_logging || is_ansi
FROM sysdatabases
WHERE name = '${dbserver}';
EOSQL
`

case "${LOGGING_FLAGS}" in
11|10|00)
	LOGGING_FLAG=`echo ${LOGGING_FLAGS} | cut -c1`
	ANSI_FLAG=`echo ${LOGGING_FLAGS} | cut -c2`
	;;
*)
	echo "${PROGNAME} Error: DBACCESS error trying to check database logging mode" >&2
	cat < ${SQL_ERROR_FILE} >&2
	exit 1
	;;
esac
	
	

dbaccess ${dbserver} - <<EOSQL 1>&2 2>${SQL_ERROR_FILE} 
${SET_AUTH_CLAUSE}
${TABLE_LIST_CREATE_SQL}
output to pipe "cat  | grep -v '^$' >${TABLE_LIST_FILE}" without headings
select trim(t.tabname) || ' ' ||trim(t.owner) from informix.systables t $FROM_FILTER_CLAUSE
where $sel_filter
order by 1;
EOSQL

if [ $? != 0  -o ! -r ${TABLE_LIST_FILE} ]
then
	echo "${PROGNAME} Error: DBACCESS error trying to fetch table list">&2
	cat < ${SQL_ERROR_FILE} >&2
	exit 1
fi

LINE_COUNT=`wc -l ${TABLE_LIST_FILE} | awk '{print $1}'`

if [ ${LINE_COUNT} = 0 ]
then
	echo "${PROGNAME} Error: There are no tables that match the search filter" >&2
	exit 0
fi


#-----------------------------------------------------
# Setting up tbl_updstats options
#-----------------------------------------------------
case  "X$EXPLAIN_FLAG" in
X1)
	CMD_FLAGS="-e "
	;;
X2)
	CMD_FLAGS="-E ${EXPLAIN_TMP_FILE} "
	;;
esac

if [ "X${PRIORITY_FLAG}" = "X1" ]
then
	CMD_FLAGS="${CMD_FLAGS} -p ${priority}"
fi

if [ "X${TIMINGS_FLAG}" = "X1" ]
then
	CMD_FLAGS="${CMD_FLAGS} -T"
fi

COMMENT_STRING="#"
if [ "X${CMD_DISPLAY_FLAG}" != "X" ]
then
	CMD_FLAGS="${CMD_FLAGS} ${CMD_DISPLAY_FLAG}"
	COMMENT_STRING="--"
fi

if [ "X$SET_AUTH_FLAG" = "X1" ]
then
        CMD_FLAGS="${CMD_FLAGS} -S ${SET_AUTH_USER}"
fi


if [ "X$ANSI_FLAG" = "X1" ]
then
        CMD_FLAGS="${CMD_FLAGS} -i -a"
else
	if [ "X$LOGGING_FLAG" = "X1" ]
	then
	        CMD_FLAGS="${CMD_FLAGS} -i"
	fi
fi

if [ "X${LOCK_MODE_FLAG}" = "X1" ]
then
	CMD_FLAGS="${CMD_FLAGS} -w ${LOCK_MODE_TIME} "
fi


#-----------------------------------------------------
# Launch/display or both...
#-----------------------------------------------------
while read tblname owner
do
	if [ "X$ANSI_USER_FLAG" = "X1" ]
	then
		ANSI_USER_CLAUSE="-o $owner "
	else
		ANSI_USER_CLAUSE=""
	fi

	echo "${COMMENT_STRING}${PROGNAME} Processing table ${dbserver}@${INFORMIXSERVER}:${tblname} at `date` ..."
	case "X${DISPLAY_FLAG}" in
	X1)
		#--- display only...
		echo "${COMMENT_STRING}Command: tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${AUTO_MODE_CLAUSE}${CMD_FLAGS}"
		;;
	X2)
		#--- display and execute 
		echo "${COMMENT_STRING}Command: tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${AUTO_MODE_CLAUSE}${CMD_FLAGS}"
		cat /dev/null >${EXPLAIN_TMP_FILE}
		tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${AUTO_MODE_CLAUSE}${CMD_FLAGS}
		if [ "X${EXPLAIN_FLAG}" = "X1" ]
		then
			cat ${EXPLAIN_TMP_FILE} >>${explain_file}
		fi
		;;
	X*)
		#--- execute only
		cat /dev/null >${EXPLAIN_TMP_FILE}
		tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${AUTO_MODE_CLAUSE}${CMD_FLAGS}
		if [ "X${EXPLAIN_FLAG}" = "X2" ]
		then
			cat ${EXPLAIN_TMP_FILE} >>${explain_file}
		fi
		;;
	esac
done <${TABLE_LIST_FILE}

#-----------------------------------------------------
# handling procedures...
#-----------------------------------------------------
if [ "X"$PROCEDURES_FLAG = "X1" ]
then
	echo "${COMMENT_STRING}${PROGNAME} Processing procedures at `date` ..."
	case "X${EXPLAIN_FLAG}" in
	X1)
		EXPLAIN_CLAUSE="set explain on;"
		;;
	X2)
		EXPLAIN_CLAUSE="set explain file to '${explain_file}';"
		;;
	esac
	dbaccess ${dbserver} <<!EOF 2>${SQL_ERROR_FILE} 1>${SQL_OUTPUT_FILE}
${SET_AUTH_CLAUSE}
${EXPLAIN_CLAUSE}

update statistics for procedure;
!EOF

	if [ $? != 0 ]
	then
		echo "${PROGNAME} Error: dbaccess error while running update statistics for procedures">&2
		cat ${SQL_ERROR_FILE} >&2
		exit 1
	else
		cat ${SQL_OUTPUT_FILE}
	fi
fi
echo "${COMMENT_STRING}${PROGNAME} Ended at `date` ..."
