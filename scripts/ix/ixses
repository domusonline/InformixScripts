#!/bin/sh
# Copyright (c) 2002-2016 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision: 2.0.44 $
# $Date: 2019-10-22 21:51:02 $
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.

ix_help()
{
	echo "${PROGNAME}: -V | -h | { [-a] | [-u | -U ] [ -l <login[,login]> ] | [session [ sessions...]] | -q <SID> } [ -r wait_n_secs ]"
	echo "               -V shows script version"
	echo "               -h shows this help"
	echo "               -a executes for all session"
	echo "               -r wait_n_secs (repeat each wait_n_secs seconds)"
	echo "               -l <login>[,login] filters sessions from the specified login"
	echo "               -s no separator lines between sessions"
	echo "               -u lists user sessions, like onstat -u"
	echo "               -U lists user sessions, like onstat -g sql"
	echo "               -q lists SQL info for a session, like onstat -g sql <SID>"
	echo "               session [ sessions...] session(s) number(s)"
	echo "Ex: ${PROGNAME} -r 4 23345"
}

clean_up_function()
{
	rm -f ${TMP_FILE} ${DBACCESS_TMP_FILE}
}
get_args()
{
	arg_ok="r:VhasuUq:l:"
	while getopts ${arg_ok} OPTION
	do
		case ${OPTION} in
		h)   # show help
			ix_help
			exit 0
			;;
		V)      #show version
			echo "${PROGNAME} ${VERSION}" >&1
			exit 0
                        ;;
		a)   # set up the -a (all sessions flag)
			if [ "X${LIST_USER_SESSIONS_FLAG}" != "X" -o "X${LOGIN_FLAG}" != "X" -o "X${GET_SESSION_SQL_FLAG}" != "X" ]
			then
				printf "${PROGNAME}: Syntax error - Options -u, -U, -l and -q cannot be used with -a\n" >&2
				return 1
			else 
				ALL_SESSIONS_FLAG=1
			fi
			;;
		U)   # set up the -u (list user sessions flag)
			if [ "X${ALL_SESSIONS_FLAG}" != "X" "X" -o "X${GET_SESSION_SQL_FLAG}" != "X" -o "X${LIST_USER_SESSIONS_FLAG}" != "X" ]
			then
				printf "${PROGNAME}: Syntax error - Options -u, -a, and -q cannot be used with -U\n" >&2
				return 1
			else 
				LIST_USER_SESSIONS_FLAG=2
			fi
			;;
		u)   # set up the -u (list user sessions flag)
			if [ "X${ALL_SESSIONS_FLAG}" != "X" "X" -o "X${GET_SESSION_SQL_FLAG}" != "X" -o "X${LIST_USER_SESSIONS_FLAG}" != "X" ]
			then
				printf "${PROGNAME}: Syntax error - Options -U, -a, -l and -q cannot be used with -u\n" >&2
				return 1
			else 
				LIST_USER_SESSIONS_FLAG=1
			fi
			;;
		s)   # set up the -s (no separators flag)
			NO_SEPARATOR_FLAG=1
			;;
		l)   # set up the -l login
			if [ "X${ALL_SESSIONS_FLAG}" != "X" -o "X${GET_SESSION_SQL_FLAG}" != "X" ]
			then
				printf "${PROGNAME}: Syntax error - Options -a and -q cannot be used with -l\n" >&2
				return 1
			else 
				LOGIN_FLAG=1
				LOGIN_LIST=$OPTARG
				echo ${LOGIN_LIST} | egrep "^[a-zA-Z][a-zA-Z0-9\-_]*(,[a-zA-Z][a-zA-Z0-9\-_])*" 1>/dev/null 2>/dev/null
				RES=$?
				if [ "X${RES}" != "X0" ]
				then
					echo "${PROGNAME}: Syntax error - Login list must be valid logins separated by commas" >&2
					return 1
				fi
			fi
			;;
		q)   # set up the -q
			if [ "X${ALL_SESSIONS_FLAG}" != "X" -o "X${LIST_USER_SESSIONS_FLAG}" != "X" -o "X${LOGIN_FLAG}" != "X" ]
			then
				printf "${PROGNAME}: Syntax error - Options -U, -a, -u and -l cannot be used with -q\n" >&2
				return 1
			else 
				GET_SESSION_SQL_FLAG=1
				GET_SESSION_SQL_SES=$OPTARG
				echo ${GET_SESSION_SQL_SES} | grep "^[0-9][0-9]*$" 1>/dev/null 2>/dev/null
				RES=$?
				if [ "X${RES}" != "X0" ]
				then
					echo "${PROGNAME}: Syntax error - Session id must be numeric" >&2
					return 1
				fi
			fi
			;;
		r)   # set up the -r (repeat flag)
			REPEAT_FLAG=1
			REPEAT_WAIT=$OPTARG
			echo ${REPEAT_WAIT} | grep "^[0-9][0-9]*$" 1>/dev/null 2>/dev/null
			RES=$?
			if [ "X${RES}" != "X0" ]
			then
				echo "${PROGNAME}: Syntax error - Wait time must be numeric" >&2
				return 1
			fi
			;;
		?)      # Error in the parsing of getopts
			return 1
			;;
		esac
	done
	if [ ${NUM_ARGUMENTS} -ge ${OPTIND} ]
	then
		shift `expr $OPTIND - 1`
		if [ "X${ALL_SESSIONS_FLAG}" != "X" -o "X${LOGIN_FLAG}" != "X" -o "X${GET_SESSION_SQL_FLAG}" != "X" -o "X${LIST_USER_SESSIONS_FLAG}" != "X" ]
		then
			printf "${PROGNAME}: Syntax error - Options -U, -u, -a, -l and -q cannot be used with list of session\n" >&2
			return 1
		else 
			for OPTION in $*
			do
				echo $OPTION | grep "^[0-9][0-9]*$" 1>/dev/null 2>/dev/null
				RES=$?
				if [ ${RES} != 0 ]
				then
					echo "${PROGNAME}: Syntax error - Invalid parameter for session number" >&2
					return 1
				else
					SESSION_LIST="${SESSION_LIST} $1"
					shift
					continue
				fi
			done
		fi
	fi
}

#INIT

PROGNAME=`basename $0`
VERSION=`echo "$Revision: 2.0.44 $" | cut -f2 -d' '`
SESSION_LIST=""


NUM_ARGUMENTS=$#
get_args $*
if [ $? != 0 ]
then
	ix_help >&2
	exit 1
fi



SO=`uname -s | tr "[:upper:]" "[:lower:]"`
case $SO in
sunos*)
	AWK=nawk
	PS_CMD="ps -o \"time,comm\""
	;;
osf*)
	PS_CMD="ps -o \"time,cmd\""
	AWK=nawk
	;;
hp-ux)
	PS_CMD="export UNIX_STD=2003;ps -o \"time,comm\""
	AWK=gawk
	;;
linux|*)
	PS_CMD="ps -o \"time,cmd\""
	AWK=gawk
	;;
esac

#fallback to an existing awk

type ${AWK} 2>/dev/null 1>/dev/null
RES=$?
if [ ${RES} != 0 ]
then
	AWK=awk
fi



PROC=$$
HOSTNAME=`hostname | cut -f1 -d'.'`

# timezone delta for connect value
TZ_LOCAL_HOUR=`date +"%H"`
TZ_GMT_HOUR=`date -u +"%H"`
TZ_DIFF=`expr ${TZ_LOCAL_HOUR} - ${TZ_GMT_HOUR}`
TMP_FILE=/tmp/$PROGNAME_$$
DBACCESS_TMP_FILE=/tmp/${PROGNAME}_dbacces_$$

trap clean_up_function 0

if [ "X${GET_SESSION_SQL_FLAG}" != "X" ]
then

	while true
	do
	dbaccess sysmaster <<EOF 2>${DBACCESS_TMP_FILE} 1>&2
UNLOAD TO $TMP_FILE
SELECT
        "C", sdb_name, sdb_id, sdb_bufreads, sdb_pagereads,
        sdb_bufwrites, sdb_pagewrites, sdb_totsorts, sdb_dsksorts, sdb_sortspmax,
	sdb_sqerrno, sdb_sqiserrno, sdb_errstr, cbl_estcost, cbl_estrows,
	cbl_seqscan, cbl_srtscan, cbl_autoindex, cbl_index, cbl_remsql,
	cbl_mrgjoin, cbl_dynhashjoin, cbl_keyonly, cbl_tempfile, cbl_tempview,
        cbl_secthreads, cbl_stmt, sqs_dbname,
	CASE sqs_iso
		WHEN 0 THEN
			'No Log  '::CHAR(8)
		WHEN 1 THEN
			'DR      '::CHAR(8)
		WHEN 2 THEN
			'CR      '::CHAR(8)
		WHEN 3 THEN
			'CS      '::CHAR(8)
		WHEN 5 THEN
			'RR      '::CHAR(8)
		WHEN 7 THEN
			'DR RUL  '::CHAR(8)
		WHEN 8 THEN
			'CR RUL  '::CHAR(8)
		WHEN 9 THEN
			'CS RUL  ' ::CHAR(8)
		WHEN 11 THEN
			'CR LComm'::CHAR(8)
		ELSE
			'?       '::CHAR(8)
	END,
	CASE sqs_lockmode
		WHEN -1 THEN
			'Wait    '::CHAR(8)
		WHEN 0 THEN
			'Not Wait'::CHAR(8)
		ELSE
			('Wait '||sqs_lockmode)::CHAR(8)
	END,
	sqs_sqlerror, sqs_isamerror, sqs_feversion, sqs_statement, NVL(SUBSTR(ft.txt,4,14), "-")
FROM
        syssqlstat sqls, outer (sysconblock con, flags_text ft, outer syssdblock sdb)
WHERE
        sqls.sqs_sessionid = $GET_SESSION_SQL_SES
	and sdb.sdb_sessionid = $GET_SESSION_SQL_SES
	and cbl_sessionid = $GET_SESSION_SQL_SES
        and sdb_iscurrent = "Y"
	and cbl_ismainblock = "Y"
        and sqs_sessionid = sdb_sessionid
        and sqs_sessionid = cbl_sessionid
        and sdb_sessionid = cbl_sessionid
	and cbl_selflag = ft.flags and ft.tabname = 'sqltype'

UNION
SELECT
        "L",
        sql_stmtname::char(128),
        0::smallint, sql_bfreads, sql_pgreads, sql_bfwrites, sql_pgwrites,
        sql_sorttotal, sql_sortdisk, 0::integer, 0::smallint, 0::smallint, 0::char(64),
        0::integer, 0::integer, 0::smallint, 0::smallint, 0::smallint, 0::smallint,
        0::smallint, 0::smallint, 0::smallint, 0::smallint, 0::smallint, 0::smallint,
        0::smallint, sql_statement::char(32000),
	""::char(128), ""::CHAR(8), ""::CHAR(8),0::smallint,0::smallint,""::char(4), ""::char(200), SUBSTR(sql_stmtname,1,14)
FROM syssqltrace sql1
WHERE
        sql_sid = $GET_SESSION_SQL_SES
        and sql_id = (select max(sql_id) from syssqltrace sql2 where sql2.sql_sid = $GET_SESSION_SQL_SES )
ORDER BY 1;
EOF
	
	RC=$?
	if [ $RC != 0 ]
	then
		printf "Error calling dbaccess (get session sql data): %s\nError message:\n" $RC >&2
		cat ${DBACCESS_TMP_FILE} >&2
		exit 1
	fi
	sed 's/\\\|/PIPE/g' $TMP_FILE | sed -e :a -e '/\\$/N; s/\\\n/ /; ta' | $AWK -F'|' -v "my_sessionid=$GET_SESSION_SQL_SES" 'BEGIN { header = 0;got_last=0}
	{
	my_sql_line_type=$1;
	my_stmtname=$2;
	my_bufreads=$4;
	my_pagereads=$5;
	my_bufwrites=$6;
	my_pagewrites=$7;
	my_totsorts=$8;
	my_dsksorts=$9;
	my_sortspmax=$10;
	my_sqerrno=$11;
	my_isamerr=$12;
	my_errmsg=$13;
	my_estcost=$14;
	my_estrows=$15;
	my_seqscan=$16;
	my_srtscan=$17;
	my_autoindex=$18;
	my_index=$19;
	my_remsql=$20;
	my_mrgjoin=$21;
	my_dynhashjoin=$22;
	my_keyonly=$23;
	my_tempfile=$24;
	my_tempview=$25;
	my_secthreads=$26;
	my_sql=$27;
	gsub("PIPE","|", my_sql);
	my_header_dbname=$28;
	my_header_iso=$29;
	my_header_lockmode=$30;
	my_header_sqlerror=$31;
	my_header_isamerror=$32;
	my_header_feversion=$33;
	my_header_lastsql=$34;
	gsub("PIPE","|", my_header_lastsql);
	my_header_stmttype=$35;
	if ( header == 0 )
	{
	header=1;
	printf("\n\n");
	printf("%-10s %-14s %-18s %-8s %-10s %-9s %-10s %-10s\n","Sessionid", "SQL stmt type", "Current Database", "Iso Lv", "Lock Mode", "SQL Error", "Isam Error", "FE Version");
	printf("%-10s %-14s %-18s %-8s %-10s %-9s %-10s %-10s\n", my_sessionid,my_header_stmttype,my_header_dbname,my_header_iso,my_header_lockmode,my_header_sqlerror,my_header_isamerror,my_header_feversion);
	}
	if ( my_sql_line_type == "C" )
	{

		if (  my_sql != "" )
		{
			if ( my_stmtname != "" )
			{
				printf("\nCurrent statement name: %s\n", my_stmtname);
			}
			printf( "\nCurrent SQL statement:\n");
			printf( "  %s\n\n", my_sql );
		}
		my_last_resource=my_header_lastsql;
	}
	if ( my_sql_line_type == "L" && my_sql != "" )
	{
		printf( "Last parsed SQL statement:\n");
		printf( "  %s\n\n", my_sql );
		got_last=1;
	}

	} END { if ( got_last == 0) {
					printf( "Last parsed SQL statement:\n");
					printf( "  %s\n\n", my_last_resource );
				}
					printf("\n");} '
				

	#cat $TMP_FILE

	if [ "X${REPEAT_FLAG}" = "X" ]
	then
		break
	else
		if [ "X${NO_SEPARATOR_FLAG}" = "X" ]
		then
			echo
			echo  "#------------------- LOOP -------------------"
			echo
		fi
		sleep ${REPEAT_WAIT}
	fi
	done

	exit 0
fi

if [ "X${LIST_USER_SESSIONS_FLAG}" != "X" ]
then

	if [ "X${LOGIN_FLAG}" != "X" ]
	then
		USER_CLAUSE=`echo $LOGIN_LIST | $AWK -F',' '{for(a=1;a<=NF;a++) {if (a==1) printf "\"%s\"",$a; else printf ",\"%s\"",$a; }}'`
		USER_CLAUSE="AND r.username IN ( $USER_CLAUSE )"
	else
		USER_CLAUSE=""
	fi
	while true
	do
	dbaccess sysmaster <<EOF 2>${DBACCESS_TMP_FILE} 1>&2
UNLOAD TO $TMP_FILE
SELECT
	SUBSTR(HEX(r.address),3) address,
	CASE
		WHEN wtcondp != 0 THEN
			'Y'
		WHEN bitval(r.flags, '0x2') = 1 THEN
			'S'
		WHEN bitval(r.flags, '0x4') = 1 THEN
			'L'
		WHEN bitval(r.flags, '0x8') = 1 THEN
			'B'
		WHEN bitval(r.flags, '0x10') = 1 THEN
			'C'
		WHEN bitval(r.flags, '0x1000') = 1 THEN
			'G'
		WHEN bitval(r.flags, '0x40000') = 1 THEN
			'T'
		ELSE
			'-'
	END ||                                               -- Position 1
	'-' ||                                               -- Position 2
	CASE
		WHEN bitval(r.flags, '0x400') = 1 THEN
			'A'
		WHEN bitval(tx.flags, '0x00000400') = 1 THEN
			'B'
		WHEN bitval(tx.flags, '0x00002000') = 1 THEN
			'R'
		WHEN bitval(tx.flags, '0x00000100') = 1 THEN
			'C'
		ELSE
			'-'
	END ||                                              -- Position 3
	CASE
		WHEN bitval(r.flags, '0x80000') = 1 THEN
			'P'
		ELSE
			'-'
	END ||                                              -- Position 4
	CASE
		WHEN bitval(r.flags, '0x20') = 1 THEN
			'R'
		WHEN bitval(r.flags, '0x100') = 1 THEN
			'X'
		ELSE
			'-'
	END ||                                              -- Postiion 5
	'-' ||                                              -- Position 6
	CASE
		WHEN bitval(r.flags, '0x200000') = 1 THEN
			'B'
		WHEN bitval(r.flags, '0x000800') = 1 THEN
			'C'
		WHEN bitval(r.flags, '0x000200') = 1 THEN
			'D'
		WHEN bitval(r.flags, '0x002000') = 1 THEN
			'F'
		WHEN bitval(r.flags, '0x000080') = 1 THEN
			'M'
		ELSE
			'-'
	END flags,
	r.sid sessid,
	r.username user,
	NVL(s.ttyerr,'-') tty, 
	CASE t.wtcondp
		WHEN 0 THEN
			'0'
		ELSE
			SUBSTR(HEX(t.wtcondp),3)
	END wait,
	r.timeout tout,
	r.nlocks locks,                                         -- #8
	r.nreads nreads,                                        -- #9
	r.nwrites nwrites,                                      -- #10
	s.pid,                                                  -- #11
	CASE s.connected
		WHEN null THEN
			null
		ELSE
			DBINFO('utc_to_datetime',s.connected)
	END connected,                                          -- #12
	s.progname,                                             -- #13
	t.statedetail,                                          -- #14
	s.hostname,                                             -- #15
	sqls.sqs_dbname,                                        -- #16
	CASE sqls.sqs_iso
		WHEN 0 THEN
			'NL'
		WHEN 1 THEN
			'DR'
		WHEN 2 THEN
			'CR'
		WHEN 3 THEN
			'CS'
		WHEN 5 THEN
			'RR'
		WHEN 7 THEN
			'dr'
		WHEN 8 THEN
			'cr'
		WHEN 9 THEN
			'cs'
		WHEN 11 THEN
			'LC'
		ELSE
			'--'
	END,                                                   -- #17
	sqls.sqs_lockmode,                                     -- #18
	sqls.sqs_sqlerror,                                     -- #19
	sqls.sqs_isamerror                                     -- #20
	
		

FROM
	sysrstcb r,  sysscblst s, outer systcblst t, outer systxptab tx, outer syssqlstat sqls
WHERE
        s.address = r.scb AND
	r.tid = t.tid AND
	tx.address = r.txp AND
	bitval(r.flags, '0x1') = 1 AND
	sqls.sqs_sessionid = r.sid
	$USER_CLAUSE;
EOF
	RC=$?
	if [ $RC != 0 ]
	then
		printf "Error calling dbaccess (get user list data): %s\nError message:\n" $RC >&2
		cat ${DBACCESS_TMP_FILE} >&2
		exit 1
	fi

	case $LIST_USER_SESSIONS_FLAG in
	1)
		$AWK -F'|' ' BEGIN {
		printf("%-16s %-7s %-8s %-8s %-8s %-16s %-4s %-5s %-8s %-8s \n","address", "flags", "sessid", "user","tty","wait","tout","locks","nreads","nwrites");}
			{
				n=split($5,a,"/");
				printf("%-16s %-7s %-8s %-8s %-8s %-16s %-4s %-5s %-8s %-8s \n",$1,$2,$3,$4,a[n],$6,$7,$8,$9,$10);
			}' $TMP_FILE
		;;
	2)
		$AWK -F'|' ' BEGIN {
		printf("%-8s %-18s %-8s %-16s %-7s %-6s %-3s %-6s %-6s %-6s %-8s %-28s\n", "Sessid", "Database","User", "Hostname","TTY","Pid","IL","LkMode","SqlErr","IsamEr","Locks","State");}
			{	
				n=split($5,a,"/");
		printf("%-8s %-18s %-8s %-16s %-7s %-6s %-3s %-6s %-6s %-6s %-8s %-28s\n", $3, $16,$4, $15,a[n],$11,$17,$18,$19,$20,$8,$14);
			}' $TMP_FILE
		;;
	esac

	if [ "X${REPEAT_FLAG}" = "X" ]
	then
		break
	else
		if [ "X${NO_SEPARATOR_FLAG}" = "X" ]
		then
			echo
			echo  "#------------------- LOOP -------------------"
			echo
		fi
		sleep ${REPEAT_WAIT}
	fi
done
		
	rm -f $TMP_FILE

	exit 0
fi

if [ "X${ALL_SESSIONS_FLAG}" = "X1" ]
then
	SESSION_LIST="${SESSION_LIST} `onstat -u | ${AWK} '{if ( $2 ~ /.*([DF]$|active)/ ) {next} else {print $3}}' | grep '^[0-9]'`"
fi

if [ "X${LOGIN_FLAG}" = "X1" ]
then
	SESSION_LIST="${SESSION_LIST} `onstat -u | ${AWK} -v LOGIN_LIST="${LOGIN_LIST}" 'BEGIN {
NUM_LOGINS=split(LOGIN_LIST,LOGIN_ARRAY,",");
}
{
	if ( $2 ~ /.*([DF]$|active)/ )
		next;
	else
		for (a=1;a<=NUM_LOGINS;a++)
			if ( $4 == LOGIN_ARRAY[a] )
			{
				print $3;
				next;
			}
}' | grep '^[0-9]'`"

fi

if [ "X${SESSION_LIST}" = "X" ]
then
	echo "${PROGNAME}: Error - No sessions to process" >&2
	exit 1

fi

while true
do
	for session in ${SESSION_LIST}
	do
		echo ${session} | grep "^[0-9][0-9]*$" 1>/dev/null 2>/dev/null
		RES=$?
		if [ ${RES} != 0 ]
		then
			continue
		fi

		line=`dbaccess sysmaster<<EOF 2>/dev/null |cut -f2- -d' ' 
SELECT FIRST 1
	DBINFO('utc_to_datetime', net_open_time)||"!"||DBINFO('utc_to_datetime', net_last_read)||"!"||DBINFO('utc_to_datetime', net_last_write)||"!"
FROM
	sysnetworkio
WHERE
	sid=$session
ORDER BY 1
EOF
`
		if [ "X${line}" = "X" ]
		then
			# obtaining last read/write timestamps on session
			line=`onstat -g ntt | ${AWK} 'BEGIN {PREV_LINE="NOPRINT"} /netscb.*sid/,/END/ {if (NF <= 3 && NF >0 ) {print PREV_LINE " " $1 " " $2 " " $3;PREV_LINE="NOPRINT"} else {if  ( PREV_LINE != "NOPRINT") { print PREV_LINE};PREV_LINE=$0;}}' | ${AWK} -v "SESSION=${session}" '
function convert_date(mydate)
			{
			if (mydate == "" )
				return("");
			split(mydate,a,"/");
			MONTH=a[1];
			DAY=a[2];
			YEAR=a[3];
			return("20"YEAR"-"MONTH"-"DAY" ");
		}
		$3 ~ SESSION { print convert_date($7) $4 "!" convert_date($8) $5 "!" convert_date($9) $6}'`
		fi
		CONN_TIMESTAMP=`echo $line | cut -f1 -d'!'`
		READ_TIMESTAMP=`echo $line | cut -f2 -d'!'`
		WRITE_TIMESTAMP=`echo $line | cut -f3 -d'!'`

		onstat -g ses ${session} | ${AWK} -v "TZ_DIFF=${TZ_DIFF}" -v "PS_CMD=${PS_CMD}" -v "SESSION=${session}" -v "HOST=${HOSTNAME}" -v "PROC=${PROC}" -v "CONN_TIMESTAMP=${CONN_TIMESTAMP}" -v "READ_TIMESTAMP=${READ_TIMESTAMP}" -v "WRITE_TIMESTAMP=${WRITE_TIMESTAMP}" '
#-------------------------------------------------------------
# BEGIN AWK script
# Init vars
#-------------------------------------------------------------
	function max_length(value, size)
	{
		currentsize=length(value);
		if ( currentsize <= size )
			return(value);
		targetsize=size-2;
		resp="";
		if ( targetsize <= 0)
		{
			for (f=1;f<=size;f++)
				resp=sprintf("%s%c",resp,"*");
			return(resp);
		}
		else
		{
			exponent=currentsize - targetsize;
			if (exponent > 9)
				targetsize--;
			if (exponent > 99)
				targetsize--;
			if (targetsize < 1 )
			{
				for (f=1;f<=size;f++)
					resp=sprintf("%s%c",resp,"*");
			}
			else
				resp=substr(value,1,targetsize) "e" exponent;
			return(resp);
		}
			
	}
	BEGIN {
		my_no_session=1;
		flag_effective_user=0;
		TMP_DIR="/tmp/";
		FILE_PREFIX="sstat_";
		FILE_HEX_CONV=sprintf("%s%stmp_%s.aux", TMP_DIR,FILE_PREFIX,PROC);
		FILE_HEX_CONV_OUT=sprintf("%s%stmp_%s_1.aux", TMP_DIR,FILE_PREFIX,PROC);
		FILE_THREAD_SQL=sprintf("%s%sthread_%s.sql", TMP_DIR,FILE_PREFIX,PROC);
		FILE_THREAD_UNL=sprintf("%s%sthread_%s.unl", TMP_DIR,FILE_PREFIX,PROC);
		FILE_TMP_UNL=sprintf("%s%stmp_%s.unl", TMP_DIR,FILE_PREFIX,PROC);
		FILE_SESSION_UNL=sprintf("%s%sses%s.unl", TMP_DIR,FILE_PREFIX,PROC);
		FILE_SQL_UNL=sprintf("%s%s_sql%s.unl", TMP_DIR,FILE_PREFIX,PROC);
		first=1;
		my_sql_lines=1;
		SES_STR=sprintf("unload to \"%s\" delimiter \" \" select local, cwd, hostname, DBINFO(\"utc_to_datetime\",connected) + ( %s ) UNITS HOUR from sysmaster:sysscblst where sid = %s;\n", FILE_SESSION_UNL, TZ_DIFF, SESSION);

		TEMP_STR=sprintf("unload to \"%s\" delimiter \" \" select p.partnum, p.nrows, t.tabname from sysmaster:sysptnhdr p, sysmaster:systabnames t where p.partnum=t.partnum and p.partnum in ( ", FILE_TMP_UNL);

		my_optofc="n/a";
		my_pdq_priority="n/a";
		my_sqlstats="n/a";
		my_optcompind="n/a";
		my_directives="n/a";
		my_conn_timestamp=CONN_TIMESTAMP;
		my_read_timestamp=READ_TIMESTAMP;
		my_write_timestamp=WRITE_TIMESTAMP;

	} 

#-------------------------------------------------------------
# check if onstat gives user and effective user
#-------------------------------------------------------------
	/^session           effective/ {
		flag_effective_user=1;
	}
#-------------------------------------------------------------
# Session and user ID
#-------------------------------------------------------------
	/^id/ { 
		pos_user_index=2;
		pos_effective_user_index=3;
		pos_tty_index=3+flag_effective_user;
		pos_pid_index=4+flag_effective_user;
		pos_hostname_index=5+flag_effective_user;
		pos_nthreads_index=6+flag_effective_user;
		pos_total_memory_index=7+flag_effective_user;
		pos_used_memory_index=7+flag_effective_user;
		getline; my_user=$pos_user_index;my_tty=$pos_tty_index; my_pid=$pos_pid_index;
		pos=match($pos_hostname_index,"\\.");
		if (pos == 0)
		{
			my_hostname=$pos_hostname_index;
		}
		else
		{
			my_hostname=substr($pos_hostname_index,1,pos-1);
		}
		my_nthreads=$pos_nthreads_index;

		if ( flag_effective_user == 1 )
			my_effective_user=$pos_effective_user_index;
		else
			my_effective_user="";

		my_total_memory=$pos_total_memory_index;
		my_used_memory=$pos_used_memory_index;
		my_no_session=0;
	} 

#-------------------------------------------------------------
# Thread identification lines
#-------------------------------------------------------------
	/^tid *name/ { for (f=1; f<= my_nthreads; f++)
		{ 
			getline; my_tid[f]=$1; my_thread_name[f]=$2;my_rstcb[f]=$3;my_flags[f]=$4;my_status[f]=$6 " " $7 " " $8 " " $9 " " $10; 
		} 
	}

#-------------------------------------------------------------
# 9.4 extras
#-------------------------------------------------------------
#scb              sqscb            optofc   pdqpriority sqlstats optcompind  directives
#2445a1118        24529f028        0        0           1        2           1

	/^scb *sqscb/ {
		getline;
		my_optofc=$3;
		my_pdq_priority=$4;
		my_sqlstats=$5;
		my_optcompind=$6;
		my_directives=$7;
	}
#-------------------------------------------------------------
# Session characteristics and SQL statement type
#-------------------------------------------------------------
	/^Sess *SQL/ {
		linha=$0;
		pos_aux_database=match(linha, "Curren");
		pos_aux_iso_level=match(linha, "Iso");
		pos_aux_lock_mode=match(linha, "Lock");
		pos_aux_isam_err=match(linha, "ISAM");
		pos_aux_fe_version=match(linha, "F.E.");
		getline;
		linha=$0;
		pos_aux_sql_err=match(linha,"ERR");
		pos_aux_stmt_type=match(linha, "Stmt");
		getline;
		linha=$0;
		my_stmt_type=substr(linha,pos_aux_stmt_type,pos_aux_database-pos_aux_stmt_type -1);
		my_database=substr(linha,pos_aux_database,pos_aux_iso_level-pos_aux_database -1);
		my_iso_level=substr(linha,pos_aux_iso_level,pos_aux_lock_mode - pos_aux_iso_level -1);
		my_lock_mode=substr(linha,pos_aux_lock_mode,pos_aux_sql_err-pos_aux_lock_mode -1);
		my_sql_err=substr(linha,pos_aux_sql_err,pos_aux_isam_err-pos_aux_sql_err -1);
		my_isam_err=substr(linha,pos_aux_isam_err,pos_aux_fe_version-pos_aux_isam_err -1);
		my_fe_version=substr(linha,pos_aux_fe_version);
                pos=match(my_fe_version," ");
                if ( pos != 0 )
                {
			n=split(my_fe_version,a,"  *");
                        my_fe_version=a[1];
                        my_set_explain=a[2];
                }
                else
                {
                        my_set_explain="n/a"
		}
	}

#-------------------------------------------------------------
# Current executing SQL statement
#-------------------------------------------------------------
	/^Current SQL/,/^$/ { my_sql_length=length(my_sql[my_sql_lines]);
				my_line_length=length(); 
				if ((my_sql_length + my_line_length) < 3000)
					my_sql[my_sql_lines]=sprintf("%s\n%s", my_sql[my_sql_lines], $0)
				else
				{
					my_sql_lines++;
					my_sql[my_sql_lines]=sprintf("%s\n",$0);
				}
			} \

#-------------------------------------------------------------
# Host variables ( 9.4 and up)
#-------------------------------------------------------------

	/^Host variables :/,/^$/ { if ( $0 ~ /(address|----------)/ )
					{ my_host_variables="";next; }
				else
				{
					my_host_variables=sprintf("%s%-15s %-10s",my_host_variables,$2, $3);
					for(i=4;i<=NF;i++)
						my_host_variables=sprintf("%s %s",my_host_variables, $i);
					my_host_variables=sprintf("%s%s",my_host_variables, "\n");
				}
			}

#-------------------------------------------------------------
# Last parsed SQL statement
#-------------------------------------------------------------
	/^Last parsed SQL statement/,/^$/ {my_last_sql_length=length(my_last_sql);my_line_length=length();if ((my_last_sql_length + + my_line_length) < 3000) my_last_sql=sprintf("%s\n%s", my_last_sql, $0); } \

#-------------------------------------------------------------
# Temp tables processing
#-------------------------------------------------------------
	/User-created/,/^$/ {
		if ( $1 ~ "partnum" || $1 ~ "User-created" || $1 == "" )
		{
			next
		}
		else
		{
			partnum=toupper($1);tabname=$2;
			printf("ibase = 16\n%s\nquit\n",partnum) >FILE_HEX_CONV;
			comando=sprintf("bc %s > %s; rm -f %s", FILE_HEX_CONV, FILE_HEX_CONV_OUT,FILE_HEX_CONV);
			system(comando);
			close(comando);
			close(FILE_HEX_CONV);
			getline dec_partnum <FILE_HEX_CONV_OUT;
			close(FILE_HEX_CONV_OUT);
			comando=sprintf("rm -f %s", FILE_HEX_CONV_OUT);
			system(comando);
			close(comando);
			if ( first == 1 )
			{
				TEMP_STR=sprintf("%s %s", TEMP_STR,dec_partnum);
			}
			else
			{
				TEMP_STR=sprintf("%s , %s ",TEMP_STR,dec_partnum);
			}
		}
		partnums[first]=dec_partnum;
		first++;
	}


   END {
		if ( my_no_session == 1 )
		{
			exit 255;
		}
		#-------------------------------------------------------------
		# Getting PID is user is local
		#-------------------------------------------------------------
		command=sprintf("dbaccess sysmaster %s 1>/dev/null 2>/dev/null", FILE_THREAD_SQL);
		printf("set isolation to dirty read;unload to \"%s\" delimiter \" \" select  upf_rqlock, upf_wtlock, \n", FILE_THREAD_UNL) >FILE_THREAD_SQL;
		printf("upf_deadlk, upf_lktouts, \n") >>FILE_THREAD_SQL; 
		printf("upf_lgrecs, upf_isread, \n") >>FILE_THREAD_SQL;
		printf("upf_iswrite, upf_isrwrite, \n") >>FILE_THREAD_SQL;
		printf("upf_isdelete, upf_iscommit, \n") >>FILE_THREAD_SQL;
		printf("upf_isrollback, upf_longtxs, \n") >>FILE_THREAD_SQL;
		printf("upf_bufreads, upf_bufwrites, \n") >>FILE_THREAD_SQL;
		printf("upf_logspuse, upf_logspmax, \n") >>FILE_THREAD_SQL;
		printf("upf_seqscans, upf_totsorts, \n") >>FILE_THREAD_SQL;
		printf("upf_dsksorts, upf_srtspmax, \n") >>FILE_THREAD_SQL;
		printf("nlocks as num_locks, lktout \n") >>FILE_THREAD_SQL;
		printf("from sysmaster:sysrstcb \n") >>FILE_THREAD_SQL;
		printf("where tid in ( ") >>FILE_THREAD_SQL;
		for (f=1; f<=my_nthreads; f++ )
			if ( f == 1 )
			{
				printf("%s", my_tid[f]) >>FILE_THREAD_SQL;
			}
			else
			{
				printf(", %s", my_tid[f]) >>FILE_THREAD_SQL;
			}
		printf(" );\n") >>FILE_THREAD_SQL;
		if (first > 1)
		{
			TEMP_STR=sprintf("%s );", TEMP_STR);
			printf("%s",TEMP_STR) >>FILE_THREAD_SQL;
		}
		printf("%s", SES_STR) >>FILE_THREAD_SQL;
		SQL_STR=sprintf("unload to \"%s\" delimiter \" \" select sqx_bufreads, sqx_bufwrites, sqx_pagereads, sqx_pagewrites, sqx_totsorts, sqx_dsksorts, sqx_estcost, sqx_estrows, sqx_seqscan, sqx_srtscan, sqx_autoindex, sqx_index, sqx_remsql, sqx_mrgjoin, sqx_dynhashjoin, sqx_keyonly, sqx_tempfile, sqx_executions, sqx_selflag from sysmaster:syssqexplain p where p.sqx_sessionid = %s and sqx_iscurrent = \"Y\" ;\n", FILE_SQL_UNL, SESSION);
		printf("%s", SQL_STR)>>FILE_THREAD_SQL;
		system(command);

		getline < FILE_SESSION_UNL;
		dummy = gsub("\\\\", NULO);
		my_islocal = $1;
		my_cwd = $2;
		my_hostname = $3;
		#my_connected = sprintf("%s %s",$4,$5);
		my_connected = CONN_TIMESTAMP;

		close(FILE_SESSION_UNL);
		if ( my_islocal == 1)
		{
			command=sprintf("%s -p %s", PS_CMD, my_pid);
			command | getline;
			command | getline;
			my_time=$1;
			my_process=$2 " " $3 " " $4;
			close(command); 
			if (length(my_process) > 24)
			{
				my_process = ".." substr(my_process,length(my_process) - 22);
			}
		}
		if ( flag_effective_user == 0 )
		{
			print "SESSION  USER     TTY    HOSTNAME           CONNECTED           NTHR PID    PROCESS                 CWD";
			printf("%-8s %-8s %-6s %-18s %-19s %-4s %-6s %-23s %s\n", SESSION, my_user, my_tty, my_hostname, my_connected, my_nthreads, my_pid, substr(my_process,1,24), my_cwd);
		}
		else
		{
			print "SESSION  USER     EFF USER TTY    HOSTNAME           CONNECTED           NTHR PID    PROCESS                 CWD";
			printf("%-8s %-8s %-8s %-6s %-18s %-19s %-4s %-6s %-23s %s\n", SESSION, my_user, my_effective_user, my_tty, my_hostname, my_connected, my_nthreads, my_pid, substr(my_process,1,24), my_cwd);
		}
		print "";
		print "TOTAL MEM    USED MEM";
		printf "%-10s   %-10s\n",my_total_memory, my_used_memory;
		print "";
		print "DATABASE           FE VERSION  STMT TYPE          ISOLATION  LOCK MODE  SQL ERROR  ISAM ERROR EXPL OFC PDQ STATS OPTCMPIND DIR"
		printf("%-18s %-11s %-18s %-10s %-10s %-10s %-10s %-4s %-3s %-3s %-5s %-9s %-3s\n", my_database, my_fe_version,
		my_stmt_type, my_iso_level, my_lock_mode, my_sql_err, my_isam_err, my_set_explain,my_optofc,my_pdq_priority,my_sqlstats, my_optcompind, my_directives);
		print "";
		print "TID      THREAD NAME  RSTCB            FLAGS   STATUS                    LAST READ           LAST WRITE";
		for (f=1; f<=my_nthreads; f++ )
		{
			if ( f == 1 )
			{
				printf("%-8s %-12s %-16s %-7s %-25s %-19s %-17s\n", my_tid[f], my_thread_name[f], my_rstcb[f], my_flags[f], my_status[f], my_read_timestamp, my_write_timestamp );
			}
			else
			{
				printf("%-8s %-12s %-10s %-7s %s\n", my_tid[f], my_thread_name[f], my_rstcb[f], my_flags[f], my_status[f] );
			}
			getline < FILE_THREAD_UNL;
			my_lock_req = $1; my_lock_wait = $2; my_dead_locks = $3; my_lock_touts = $4; my_log_rec_w = $5;
			my_isam_reads = $6; my_isam_writes = $7; my_isam_rewrites = $8;
			my_isam_deletes = $9; my_isam_commits = $10;
			my_isam_rollback = $11; my_isam_longtx = $12;
			my_buf_read = $13; my_buf_waits = $14;
			my_logs_puse = $15; my_logs_pmax = $16;
			my_seq_scans = $17; my_sort_tot = $18;
			my_sort_dsk = $19; my_sorts_pmax = $20;
			my_lock_held = $21; my_lock_tout = $22;
			print "LKREQ   LKWAI DL TO LOGW   IREAD    IWRIT   IRW   IDEL  CMMT RB LT BREAD    BWAI    LSU LSM SSCN    TSRT DSRT SRTM LKHELD LTOUT"
			printf("%-8s%-6s%-3s%-3s%-7s%-9s%-8s%-6s%-6s%-5s%-3s%-3s%-9s%-8s%-4s%-4s%-8s%-5s%-5s%-5s%-7s%-5s",
			max_length(my_lock_req,7), max_length(my_lock_wait,5), max_length(my_dead_locks,2), max_length(my_lock_touts,2),
			max_length(my_log_rec_w,6), max_length(my_isam_reads,8), max_length(my_isam_writes,7), max_length(my_isam_rewrites,5),
			max_length(my_isam_deletes,5), max_length(my_isam_commits,4), max_length(my_isam_rollback,2),
			max_length(my_isam_longtx,2), max_length(my_buf_read,8), max_length(my_buf_waits,7),
			max_length(my_logs_puse,3), max_length(my_logs_pmax,3), max_length(my_seq_scans,7), max_length(my_sort_tot,4),
			max_length(my_sort_dsk,4), max_length(my_sorts_pmax,4), max_length(my_lock_held,6), max_length(my_lock_tout,4));
			printf("\n");
		}
		if (first > 1)
		{
			printf("\npartnum numrows tabname\n");
			prev_line="--";
			for(f=1;f<first;f++)
			{
				getline < FILE_TMP_UNL;
				if ( $0 == prev_line)
				{
					printf("%-7s %-7s %s\n", "--", "--", "--");
				}
				else
					printf("%-7s %-7s %s\n", $1, $2, $3);
				prev_line=$0;
			}
		}
		for(f=1;f<=my_sql_lines;f++)
		{
			printf("%s\n", my_sql[f]);
		}
		if ( my_sql[1] == "")
		{
			printf("\n");
			printf("%s\n", my_last_sql);
		}

		if ( my_host_variables != "" )
		{
			printf("\n");
			printf("Host variables:\n");
			printf("\n");
			printf("Data Type       Flags      Value\n");
			printf("--------------- ---------- --------------------------------------------------\n");
			printf("%s\n", my_host_variables);
		}
		prev_line = $0;
		getline < FILE_SQL_UNL;
		while( $0 != prev_line)
		{
		my_sql_bf = $1;
		my_sql_bw = $2;
		my_sql_pr = $3;
		my_sql_pw = $4;
		my_sql_tsrt = $5;
		my_sql_dsrt = $6;
		my_sql_ecost = $7;
		my_sql_erows = $8;
		my_sql_sscan = $9;
		my_sql_srtscn = $10;
		my_sql_aindex = $11;
		my_sql_index = $12;
		my_sql_rsql = $13;
		my_sql_mrgj = $14;
		my_sql_dhsh = $15;
		my_sql_konly = $16;
		my_sql_tfile = $17;
		my_sql_executions = $18;
		printf("BUF READ  BUF WRIT  PG RDS   PG WRI   TSRT DSRT ECOST  EROWS SSCAN SRTSCN AIDX IDX  RSQL MRGJ DHSHJ KONLY TFILE NEXEC\n");
		printf("%-9s %-9s %-8s %-8s %-4s %-4s %-6s %-5s %-5s %-6s %-4s %-4s %-4s %-4s %-5s %-5s %-5s %-5s\n",
		max_length(my_sql_bf, 9), max_length(my_sql_bw,9), max_length(my_sql_pr,8), max_length(my_sql_pw,8),
		max_length(my_sql_tsrt,4), max_length(my_sql_dsrt,4), max_length(my_sql_ecost,6), max_length(my_sql_erows,5),
		max_length(my_sql_sscan,5), max_length(my_sql_srtscn,6), max_length(my_sql_aindex,4),
		max_length(my_sql_index,4), max_length(my_sql_rsql,4), max_length(my_sql_mrgj,4), max_length(my_sql_dhsh,5),
		max_length(my_sql_konly,5), max_length(my_sql_tfile,5), max_length(my_sql_executions,5) );
		prev_line = $0;
		getline < FILE_SQL_UNL;
		}
		close(FILE_SQL_UNL);
		command=sprintf("rm -f %s %s %s %s %s", FILE_THREAD_SQL, FILE_SESSION_UNL, FILE_THREAD_UNL, FILE_TMP_UNL, FILE_SQL_UNL);
		system(command);
}'
		RES=$?

		if [ "X${RES}" != "X255" -a "X${NO_SEPARATOR_FLAG}" = "X" ]
		then
			echo ""
			echo "#----------------- session ------------------"
			echo ""
		fi
	done

	if [ "X${REPEAT_FLAG}" = "X" ]
	then
		break
	else
		if [ "X${NO_SEPARATOR_FLAG}" = "X" ]
		then
			echo
			echo  "#------------------- LOOP -------------------"
			echo
		fi
		sleep ${REPEAT_WAIT}
	fi
done
