#!/bin/sh
# Copyright (c) 2004-2016 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision: 2.0.45 $
# $Date: 2019-10-23 00:23:06 $
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.

usage()
{
	echo "$PROGNAME Usage:" >&2
	echo "$PROGNAME <existing INFORMIXDIR> <new virt INFORMIXDIR> [ {DBSA GROUP} {AAO_GROUP} {DBSSO_GROUP} ]" >&2
}



PROGNAME=`basename $0`
VERSION=`echo "$Revision: 2.0.45 $" | cut -f2 -d' '`
TMP_ERR_FILE=/tmp/$PROGNAME.stderr.$$

clean_up()
{
	rm -f $TMP_ERR_FILE
}

trap clean_up 0

case $# in
2)
	EXISTING_IXDIR=$1
	NEW_IXDIR=$2
	GROUPS_FLAG=0
	;;
5)
	EXISTING_IXDIR=$1
	NEW_IXDIR=$2
	DBSA_GROUP=$3
	grep "^${DBSA_GROUP}:" /etc/group 1>/dev/null 2>/dev/null
	if [ $? != 0 ]
	then
		echo "The group given for DBSA ( ${DBSA_GROUP} ) does not exist in /etc/group" >&2
		exit 1
	fi
	AAO_GROUP=$4
	grep "^${AAO_GROUP}:" /etc/group 1>/dev/null 2>/dev/null
	if [ $? != 0 ]
	then
		echo "The group given for AAO ( ${AAO_GROUP} ) does not exist in /etc/group" >&2
		exit 1
	fi
	DBSSO_GROUP=$5
	grep "^${DBSSO_GROUP}:" /etc/group 1>/dev/null 2>/dev/null
	if [ $? != 0 ]
	then
		echo "The group given for DBSSO ( ${DBSSO_GROUP} ) does not exist in /etc/group" >&2
		exit 1
	fi
	GROUPS_FLAG=1
	;;
*)
	usage
	exit 1
esac

SO=`uname -s | tr "[:upper:]" "[:lower:]"`
case $SO in
sunos*)
        AWK=nawk
        ;;
*)
        AWK=awk
        ;;
esac

export AWK

IX_VERSION=`export INFORMIXDIR=$EXISTING_IXDIR;$EXISTING_IXDIR/bin/onstat -V | egrep -e "Informix Dynamic " | $AWK '
BEGIN {
        DBSA=0
}
/Informix Dynamic/ { split($0, a, "Version"); split(a[2],b,".");VER=b[1]"."b[2] }
END {
        print VER 
}' | $AWK '{print $1}'`


OPTIONAL_DIRS="dummy"
case $IX_VERSION in
7*)
	IX_SUB_DIRS="aaodir bin dbssodir demo etc forms gls help incl ism lib msg release snmp"
	IX_LINK_DIRS="bin demo forms gls help incl ism lib msg release snmp"
	IX_COPY_DIRS="aaodir dbssodir etc"
	;;
9*)
	IX_SUB_DIRS="aaodir bin dbssodir demo doc etc extend forms gls help incl ism lib msg release snmp"
	IX_LINK_DIRS="bin demo doc extend forms gls help incl ism lib msg release snmp"
	IX_COPY_DIRS="aaodir dbssodir etc"
	;;
10.00|11.10)
	IX_SUB_DIRS="aaodir bin dbssodir demo doc etc extend forms gls help incl ism lib msg release snmp ids_license tmp"
	IX_LINK_DIRS="bin demo doc extend forms gls help incl ism lib msg release snmp ids_license"
	IX_COPY_DIRS="aaodir dbssodir etc"
	;;
11.50)
	IX_SUB_DIRS="aaodir bin dbssodir demo doc etc extend forms gls help incl ism lib msg release snmp ids_license gskit gsk ssl tmp"
	IX_LINK_DIRS="bin demo doc extend forms gls help incl ism lib msg release snmp ids_license gskit gsk"
	OPTIONAL_DIRS="snmp"
	IX_COPY_DIRS="aaodir dbssodir etc"
	;;
11.70)
	IX_SUB_DIRS="SDK aaodir bin dbssodir demo doc etc extend forms gls gskit help incl isa lib license msg properties release ssl tmp uninstall jdbc"
	IX_LINK_DIRS="SDK bin demo doc extend forms gls gskit help incl isa lib license msg properties release ism jdbc"
	OPTIONAL_DIRS="jdbc ism snmp"
	IX_COPY_DIRS="aaodir dbssodir etc"
	#ism as optional?
	;;
12.10|14.10)
	IX_SUB_DIRS="aaodir bin dbssodir demo doc ee_license etc extend gls gskit help hq incl isa jdbc jvm lib license msg OAT properties release SDK sdk_license snmp ssl tmp uninstall"
	IX_LINK_DIRS="bin demo doc ee_license extend gls gskit help hq incl isa jdbc jvm lib license msg OAT properties release SDK sdk_license snmp"
	OPTIONAL_DIRS="ee_license hq jdbc jvm OAT properties SDK sdk_license snmp"
	IX_COPY_DIRS="aaodir dbssodir etc"
        ;;
*)
	echo "Version can only be 7, 9, 10, 11, 11.50, 11.70, 12.10 or 14.10. Found:$IX_VERSION" >&2
	exit 1
	;;
esac
GROUP_MEMBERSHIP=`groups | ${AWK} '{for (a=1;a<=NF;a++) {printf("%s|",$a)} printf ("\n");}'`

MY_USER=`id | ${AWK} -F"[()]" ' { print $2 } '`



WARN_FLAG=0
case $MY_USER in
root)
	;;
informix)
	if [ "X${GROUPS_FLAG}" = "X1" ]
	then
		for GROUP in $DBSA_GROUP $AAO_GROUP $DBSSO_GROUP
		do
			echo $GROUP_MEMBERSHIP | grep "$GROUP|" >/dev/null
			if [ $? != 0 ]
			then
				WARN_FLAG=1
			fi
		done
	fi
        ;;
*)
        echo "This utility must be run as root or informix" >&2
        exit 1
        ;;
esac


if [ ! -d $EXISTING_IXDIR ]
then
	echo "$EXISTING_IXDIR is not an existing dir!" >&2
	exit 1
else
	CURR_DIR=`pwd`
	cd $EXISTING_IXDIR
	EXISTING_IXDIR=`pwd`
	cd $CURR_DIR
fi


for dir in $IX_SUB_DIRS
do
	if [ ! -d $EXISTING_IXDIR/$dir ]
	then
		AUX_FLAG=0
		for aux in ${OPTIONAL_DIRS}
		do
			if [ "X${dir}" = "X${aux}" ]
			then
				echo "$EXISTING_IXDIR/$dir does not exist!... Skiping..."
				AUX_FLAG=1
				break
			fi
		done
				
		if [ $AUX_FLAG = 0 ]
		then
			echo "$EXISTING_IXDIR/$dir does not exist!... Aborting..." >&2
			exit 1
		fi
	fi
done


if [ ! -w $NEW_IXDIR ]
then
	mkdir $NEW_IXDIR
	if  [ $? != 0 ]
	then
		echo "Error creating non existing new INFORMIXDIR: $NEW_IXDIR" >&2
		exit 1
	fi
	if [ $MY_USER != "informix" ]
	then
		chown informix:informix $NEW_IXDIR
	fi
	chmod 755 $NEW_IXDIR
fi

cd $NEW_IXDIR
if [ $? != 0 ]
then
	echo "Error changing to new INFORMIXDIR">&2
fi

for dir in $IX_LINK_DIRS
do
	if [ -d $EXISTING_IXDIR/$dir ]
	then
		if [ $MY_USER != "informix" ]
		then
			su informix -c "ln -s $EXISTING_IXDIR/$dir ."
		else
			ln -s $EXISTING_IXDIR/$dir .
		fi
	fi
done

for DIR in $IX_COPY_DIRS
do
	if [ -d $EXISTING_IXDIR/$DIR ]
	then
		mkdir $NEW_IXDIR/$DIR
		if [ "X${DIR}" = "Xetc" ]
		then
			cp -pR $EXISTING_IXDIR/$DIR/. $NEW_IXDIR/$DIR
		else
			cp -pR $EXISTING_IXDIR/$DIR/* $NEW_IXDIR/$DIR
		fi
	fi
done

if [ -d $EXISTING_IXDIR/tmp ]
then
	mkdir ${NEW_IXDIR}/tmp
fi

#SSL is created and not copied because we may want to have separate dirs owned by different DBSA groups and with different contents
if [ -d $EXISTING_IXDIR/ssl ]
then
	mkdir ${NEW_IXDIR}/ssl
	
	SSL_FILES=`find ${EXISTING_IXDIR}/ssl -type f | wc -l | awk '{print $1}'`
	if [ $SSL_FILES -gt 0 ]
	then
		cat <<!END

WARNING! ${NEW_IXDIR}/ssl directory was created.
If existing dir ($EXISTING_IXDIR/ssl) already contained SSL configuration files you may need to copy some files manually
Existing files in original dir (none was copied):
!END
		find ${EXISTING_IXDIR}/ssl -type f -exec echo cp -p {} ${NEW_IXDIR}/ssl \;
		echo;echo
	fi
fi


case ${GROUPS_FLAG} in
1)
	if [ "X${WARN_FLAG}" = "X0" ]
	then
		chown informix:${DBSSO_GROUP} $NEW_IXDIR/dbssodir
		chown informix:${DBSA_GROUP} $NEW_IXDIR/etc
		chown informix:${AAO_GROUP} $NEW_IXDIR/aaodir

		#Should ssl and tmp belong to group informix or DBSA_GROUP? 
		if [ -d $NEW_IXDIR/ssl ]
		then
			chown informix:${DBSA_GROUP} $NEW_IXDIR/ssl
		fi
		if [ -d $NEW_IXDIR/tmp ]
		then
			chown informix:informix $NEW_IXDIR/tmp
		fi
	else
		#If WARN_FLAG = 1 then we are informix and we don't belong to all the groups
		echo "User informix does not belong to all the specified groups ( ${DBSA_GROUP} , ${AAO_GROUP}, ${DBSSO_GROUP} ) "
		echo "These commands will have to be run by root:"

		echo chown informix:${DBSSO_GROUP} $NEW_IXDIR/dbssodir
		echo chown informix:${DBSA_GROUP} $NEW_IXDIR/etc
		echo chown informix:${AAO_GROUP} $NEW_IXDIR/aaodir
		if [ -d $NEW_IXDIR/ssl ]
		then
			echo chown informix:${DBSA_GROUP} $NEW_IXDIR/ssl
		fi
		if [ -d $NEW_IXDIR/tmp ]
		then
			echo chown informix:informix $NEW_IXDIR/tmp
		fi
	fi
	;;
0)
	if [ ${MY_USER} = "root" ]
	then
		chown informix:informix $NEW_IXDIR/dbssodir
		chown informix:informix $NEW_IXDIR/etc
		chown informix:informix $NEW_IXDIR/aaodir
		if [ -d $NEW_IXDIR/ssl ]
		then
			chown informix:${DBSA_GROUP} $NEW_IXDIR/ssl
		fi
		if [ -d $NEW_IXDIR/tmp ]
		then
			chown informix:informix $NEW_IXDIR/tmp
		fi
	fi
	;;
*)
	echo "Internal error: Invalid value for GROUPS_FLAG..." >&2
	exit 1
	;;
esac


chmod 770 ${NEW_IXDIR}/dbssodir ${NEW_IXDIR}/aaodir 
chmod 775 ${NEW_IXDIR}/etc
if [ -d ${NEW_IXDIR}/tmp ]
then
	chmod 770 ${NEW_IXDIR}/tmp
fi
