#!/bin/sh
# Copyright (c) 2011-2016 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision: 2.0.42 $
# $Date: 2018-09-11 22:59:27 $
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.

ix_help()
{
	echo "${PROGNAME} [ -h | -V ]" 
	echo "            -s SID database" 
	echo "            [-i] [-w] [-z|-Z|-n] [-e | -E file] database sql_script"
	echo "     -h             : Get this help"
	echo "     -V             : Get script version"
	echo "     -s SID database: Get stats for session (SID) and database"
	echo "     -n             : Do NOT reset engine stats"
	echo "     -z             : Reset engine stats using onstat (default - needs local database)"
	echo "     -Z             : Reset engine stats using SQL Admin API (can work remotely )"
	echo "     -w             : Print WSTATS info"
	echo "     -i             : I/O stats"
	echo "     -t             : Print timestamps"
	echo "     -p             : Show onstat -p outputs"
	echo "     -e             : Generate and show each query plan"
	echo "     -E file        : Generate all the query plans to the specified file"
}

get_args()
{
	arg_ok='Vhs:SzZnwitpeE:'
        
	while getopts ${arg_ok} OPTION 2>/dev/null
	do
		case ${OPTION} in
		h)   # show help
			ix_help
			exit 0
			;;
		V)   # show version
			echo "${PROGNAME} ${VERSION}" >&1
			exit 0
			;;
		s)   # show session stats
			SESSION_FLAG=1
			SESSION_ID=$OPTARG
			echo $SESSION_ID | grep "^[1-9][0-9]*$" >/dev/null
			if [ $? != 0 ]
			then
				echo "$PROGNAME: Error - Invalid ($SESSION_ID) session ID">&2
				return 1
			fi
			;;
		S)
			SESSION_FLAG=2
			SESSION_ID=`dbaccess sysmaster <<EOF 2>/dev/null | grep LINE | awk -F':' '{print $2}'
			SELECT
				"LINE:"||sid
			FROM
				sysscblst
			WHERE
				pid = "$PPID" AND
				hostname = (SELECT hostname FROM sysscblst WHERE sid = DBINFO("sessionid"))
EOF
`
			RC=$?
			echo $SESSION_ID | grep "^[1-9][0-9]*$" > /dev/null
			if [ $? != 0 -o $RC != 0 ]
			then
				echo "$PROGNAME: Error - Could not get session for PPID ($PPID)">&2
				return 1
			fi
			;;
		n)	# Do NOT reset stats
			RESETSTATS_FLAG=0
			;;
		z)	# Do NOT reset stats
			RESETSTATS_FLAG=1
			;;
		Z)	# DO  reset stats
			RESETSTATS_FLAG=2
			;;
		w)	# DO  wait stats
			WAIT_FLAG=1
			;;
		i)	# DO  wait stats
			IO_FLAG=1
			;;
		t)	# Show timestamps
			TSTAMP_FLAG=1
			;;
		p)	# Show profile counters
			PROFILE_FLAG=1
			;;
		e)	#Generate and show query plan
			if [ "X${EXPLAIN_FLAG}" != "X0" ]
			then
				echo "$PROGNAME: Error - '-e' or '-E' already processed" >&2
				return 1
			fi
			EXPLAIN_FLAG=1
			;;
		E)	#Generate and show query plan
			if [ "X${EXPLAIN_FLAG}" != "X0" ]
			then
				echo "$PROGNAME: Error - '-e' or '-E' already processed" >&2
				return 1
			else
				EXPLAIN_FILE=$OPTARG
				if [ -f $EXPLAIN_FILE ]
				then
					if [ ! -w $EXPLAIN_FILE ]
					then
						echo "$PROGNAME: Error - Explain file ( $EXPLAIN_FILE ) cannot be written/created" >&2
						return 1
					fi
				else
					EXPLAIN_DIR=`dirname $EXPLAIN_FILE`
					if [ ! -w $EXPLAIN_DIR ]
					then
						echo "$PROGNAME: Error - Explain file/dir ( $EXPLAIN_FILE ) cannot be written/created" >&2
						return 1
					fi
				fi
			fi
			EXPLAIN_FLAG=2
			;;
		?|*)
			echo "$PROGNAME: Invalid option: $OPTION" >&2
			return 1
			;;
		esac
	done
	AUX=`expr $OPTIND - 1`
	shift $AUX
	case $# in
	1)
		DATABASE=$1
		;;
	2)
		DATABASE=$1
		SQL_SCRIPT=$2
		SQL_SCRIPT_FLAG=1
		if [ ! -f $SQL_SCRIPT -o ! -r $SQL_SCRIPT ]
		then
			echo "Could not read script file ($SQL_SCRIPT)">&2
			return 1
		fi
		;;
	*)
		echo "$PROGNAME: Invalid parameter" >&2
		return 1
	esac

	echo $DATABASE | egrep "^[a-zA-Z][a-zA-Z0-9_]*$" >/dev/null
	if [ $? != 0 ]
	then
		echo "$PROGNAME: Database name invalid ( $DATABASE )" >&2
		return 1
	fi
}

get_stats()
{

	if [ "X$SESSION_FLAG" != "X" ]
	then
dbaccess sysmaster <<EOF 2>/dev/null
UNLOAD TO "$MY_STATS_FILE"
SELECT
	s.upf_rqlock, s.upf_wtlock, s.upf_deadlk, s.upf_lktouts, s.upf_lgrecs, s.upf_isread,
	s.upf_iswrite, s.upf_isrwrite, s.upf_isdelete, s.upf_iscommit, s.upf_isrollback,
	s.upf_longtxs, s.upf_bufreads, s.upf_bufwrites, s.upf_logspuse, s.upf_logspmax,
	s.upf_seqscans, s.upf_totsorts, s.upf_dsksorts, s.upf_srtspmax,
	DBINFO('utc_to_datetime',t.last_run_time), t.num_sched, trunc(t.cpu_time, 10 - length(trunc(t.cpu_time,0)||'')), t.name,
	s.lkwaittime, s.iowaittime, s.upf_niowaits, s.upf_idxbufreads
FROM
	sysrstcb s, systcblst t
WHERE
	s.sid = "$SESSION_ID" AND
	s.tid = t.tid
	
EOF
	if [ $? != 0 ]
	then
		echo "$PROGNAME: Error - Error selecting the stats (threads)" >&2
		exit 1
	fi

	awk -F'|' -v SESSION_ID=${SESSION_ID} -v IO_FLAG=${IO_FLAG} '
	function max_length(value, size)
	{
		currentsize=length(value);
		if ( currentsize <= size )
			return(value);
		targetsize=size-2;
		resp="";
		if ( targetsize <= 0)
		{
			for (f=1;f<=size;f++)
				resp=sprintf("%s%c",resp,"*");
			return(resp);
		}
		else
		{
			exponent=currentsize - targetsize;
			if (exponent > 9)
				targetsize--;
			if (exponent > 99)
				targetsize--;
			if (targetsize < 1 )
			{
				for (f=1;f<=size;f++)
					resp=sprintf("%s%c",resp,"*");
			}
			else
				resp=substr(value,1,targetsize) "e" exponent;
			return(resp);
		}
	}

	BEGIN {
		printf "Thread profiles (SID: %s)\n%-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-11s %-12s\n",
		SESSION_ID, "LkReq","LkWai","DLks","TOuts","LgRec","IsRd","IsWrt","IsRWr","IsDel","BfRd","BfWrt","LgUse", "LgMax", "SeqSc", "Srts", "DskSr", "SrtMx","Sched","CPU Time","Name";
		printf "----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----------- ------------ \n";
		add_on="";
	}

	{
		MY_upf_rqlock=$1;
		MY_upf_wtlock=$2;
		MY_upf_deadlk=$3;
		MY_upf_lktouts=$4;
		MY_upf_lgrecs=$5;
		MY_upf_isread=$6;
		MY_upf_iswrite=$7;
		MY_upf_isrwrite=$8;
		MY_upf_isdelete=$9;
		MY_upf_iscommit=$10;
		MY_upf_isrollback=$11;
		MY_upf_longtxs=$12;
		MY_upf_bufreads=$13;
		MY_upf_bufwrites=$14;
		MY_upf_logspuse=$15;
		MY_upf_logspmax=$16;
		MY_upf_seqscans=$17;
		MY_upf_totsorts=$18;
		MY_upf_dsksorts=$19;
		MY_upf_srtspmax=$20;
		MY_last_run_time=$21;
		MY_num_sched=$22;
		MY_cpu_time=$23;
		MY_name=$24;
		MY_lkwaittime=$25;
		MY_iowaittime=$26;
		MY_upf_niowaits=$27;
		MY_upf_idxbufreads=$28;
		printf "%-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-11s %-12s\n",
		max_length(MY_upf_rqlock,5), max_length(MY_upf_wtlock,5), max_length(MY_upf_deadlk,5), max_length(MY_upf_lktouts,5),
		max_length(MY_upf_lgrecs,5), max_length(MY_upf_isread,5), max_length(MY_upf_iswrite,5), max_length(MY_upf_isrwrite,5),
		max_length(MY_upf_isdelete,5),
		#max_length(MY_upf_iscommit,5), max_length(MY_upf_isrollback,5), max_length(MY_upf_longtxs,5),
		max_length(MY_upf_bufreads,5), max_length(MY_upf_bufwrites,5), max_length(MY_upf_logspuse,5), max_length(MY_upf_logspmax,5),
		max_length(MY_upf_seqscans,5), max_length(MY_upf_totsorts,5), max_length(MY_upf_dsksorts,5), max_length(MY_upf_srtspmax,5),
		#MY_last_run_time,
		max_length(MY_num_sched,5), MY_cpu_time, MY_name;
		if ( add_on == "" )
	                add_on=sprintf("%-12s %-12s %-12s %-12s %-35s\n", substr(MY_lkwaittime,1,12), substr(MY_iowaittime,1,12), substr(MY_upf_niowaits,1,12), substr(MY_upf_idxbufreads,1,12), substr(MY_name,1,35));
		else
	                add_on=sprintf("%s%-12s %-12s %-12s %-12s %-35s\n", add_on, substr(MY_lkwaittime,1,12), substr(MY_iowaittime,1,12), substr(MY_upf_niowaits,1,12), substr(MY_upf_idxbufreads,1,12), substr(MY_name,1,35));

	}
	END {
		if ( IO_FLAG == 1 )
		{
                printf "%-12s %-12s %-12s %-12s %-35s\n","LkWs", "IOWs", "nIOW", "IdxBR", "Name";
		printf "------------ ------------ ------------ ------------ -----------------------------------\n";
		printf "%s\n", add_on;
		}
	}' $MY_STATS_FILE

		if [ "X${WAIT_FLAG}" = "X1" ]
		then
			dbaccess sysmaster <<EOF 2>$TMP_ERROR_FILE
SELECT
	'Total time' cond_name, NULL::integer nwaits, SUM(b.wcumtime) cum_wait, NULL::float  max_wait ,t.name, a.sid
FROM
	sysrstcb a, systwaits b, systcblst t
WHERE
	a.sid = "$SESSION_ID" AND
	a.tid = b.tid AND
	a.tid = t.tid AND
	b.wnum > 0
GROUP BY 1,2,4,5,6
INTO TEMP t_$SESSION_ID;

UNLOAD TO "$MY_STATS_FILE"
SELECT
	c.txt, b.wnum, b.wcumtime, b.wmaxtime, t.name, a.sid
FROM
	sysrstcb a, systwaits b, flags_text c, systcblst t
WHERE
	a.sid = "$SESSION_ID" AND
	a.tid = b.tid AND
	a.tid = t.tid AND
	b.wreason = c.flags AND
	c.tabname = 'systwaits' AND
	b.wnum > 0
UNION
SELECT * FROM t_$SESSION_ID
ORDER BY 5,3,1 desc;
EOF
			if [ $? != 0 ]
			then
				echo "$PROGNAME: Error - Error selecting the session wait stats" >&2
				cat $TMP_ERROR_FILE >&2
				exit 1
			fi

			awk -F'|' '
	function max_length(value, size)
	{
		currentsize=length(value);
		if ( currentsize <= size )
			return(value);
		targetsize=size-2;
		resp="";
		if ( targetsize <= 0)
		{
			for (f=1;f<=size;f++)
				resp=sprintf("%s%c",resp,"*");
			return(resp);
		}
		else
		{
			exponent=currentsize - targetsize;
			targetvalue=value / (10**(exponent));
			resp=substr(targetvalue,1,targetsize) "e" exponent;
			return(resp);
		}
	}

	BEGIN {
		printf "Session wait statistics:\n%-35s %-35s %-12s %-12s %-12s\n", "Thread name", "Condition","Num. waits","Cum. time","Max wait";
		printf "----------------------------------- ----------------------------------- ------------ ------------ ------------\n";
	}
	{
		MY_reason=$1;
		MY_numwaits=$2;
		MY_cumtime=$3;
		MY_maxtime=$4;
		MY_name=$5;
		printf "%-35s %-35s %-12s %-12s %-12s\n", substr(MY_name,1,35), substr(MY_reason,1,35),substr(MY_numwaits,1,12),substr(MY_cumtime,1,12),substr(MY_maxtime,1,12);
	}' $MY_STATS_FILE
		fi
	fi

	dbaccess sysmaster <<EOF 2>/dev/null
UNLOAD TO "$MY_STATS_FILE"
select
        lower(hex(opn.partnum)),
        opn.pf_rqlock, opn.pf_wtlock, opn.pf_deadlk, opn.pf_lktouts,
        opn.pf_dskreads, opn.pf_dskwrites,
        opn.pf_isread, opn.pf_iswrite, opn.pf_isrwrite, opn.pf_isdelete, opn.pf_bfcread, opn.pf_bfcwrite, opn.pf_seqscans,
        case
                when p3.lockid = p3.partnum then
                        p1.tabname
                when p3.lockid != p3.partnum and p3.nrows = 0 and p3.nkeys != 0 then
                        TRIM(p2.tabname)||"#"||TRIM(p1.tabname)
                else
                        TRIM(p2.tabname)||"@"||TRIM(p1.tabname)
        end
FROM
        sysptntab opn, systabnames p1, systabnames p2 , sysptnhdr p3
WHERE
        (
        opn.pf_rqlock != 0 OR opn.pf_wtlock != 0 OR opn.pf_deadlk != 0 OR opn.pf_lktouts != 0 OR opn.pf_dskreads != 0 OR
        opn.pf_dskwrites != 0 OR opn.pf_isread != 0 OR opn.pf_iswrite != 0 OR opn.pf_isrwrite != 0 OR opn.pf_isdelete != 0 OR
        opn.pf_bfcread != 0 OR opn.pf_bfcwrite != 0 OR opn.pf_seqscans != 0
        ) AND
	p1.tabname != "$T_TAB_NAME" AND
        p1.partnum = opn.partnum AND
        p1.dbsname = "$DATABASE" AND
        p3.partnum = p1.partnum AND
        p3.lockid = p2.partnum
EOF
	if [ $? != 0 ]
	then
		echo "$PROGNAME: Error - Error selecting the stats (part)" >&2
		exit 1
	fi

	awk -F'|' -v DATABASE=${DATABASE} '
	function max_length(value, size)
	{
		currentsize=length(value);
		if ( currentsize <= size )
			return(value);
		targetsize=size-2;
		resp="";
		if ( targetsize <= 0)
		{
			for (f=1;f<=size;f++)
				resp=sprintf("%s%c",resp,"*");
			return(resp);
		}
		else
		{
			exponent=currentsize - targetsize;
			targetvalue=value / (10**(exponent));
			resp=substr(targetvalue,1,targetsize) "e" exponent;
			return(resp);
		}
	}

	BEGIN {
		printf "Partitions profiles (Database: %s)\n%-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-54s\n",
		DATABASE, "LkReq","LkWai","DLks","TOuts","DskRd","DskWr","IsRd","IsWrt","IsRWr","IsDel","BfRd","BfWrt","SeqSc", "Object name";
		printf "----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ------------------------------------------------------\n";
	}
	{
	MY_HEX_PARTNUM=$1;
        MY_pf_rqlock=$2;
	MY_pf_wtlock=$3;
	MY_pf_deadlk=$4;
	MY_pf_lktouts=$5;
        MY_pf_dskreads=$6;
	MY_pf_dskwrites=$7;
        MY_pf_isread=$8;
	MY_pf_iswrite=$9;
	MY_pf_isrwrite=$10;
	MY_pf_isdelete=$11;
	MY_pf_bfcread=$12;
	MY_pf_bfcwrite=$13;
	MY_pf_seqscans=$14;
	MY_table=$15
	printf "%-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %-5s %s\n",
	max_length(MY_pf_rqlock,5), max_length(MY_pf_wtlock,5), max_length(MY_pf_deadlk,5), max_length(MY_pf_lktouts,5), max_length(MY_pf_dskreads,5),
	max_length(MY_pf_dskwrites,5), max_length(MY_pf_isread,5), max_length(MY_pf_iswrite,5), max_length(MY_pf_isrwrite,5), max_length(MY_pf_isdelete,5),
	max_length(MY_pf_bfcread,5), max_length(MY_pf_bfcwrite,5), max_length(MY_pf_seqscans,5), MY_table;
	}' $MY_STATS_FILE


	if [ "X${PROFILE_FLAG}" = "X1" ]
	then
		dbaccess sysmaster <<EOF 2>$TMP_ERROR_FILE

UNLOAD TO "$MY_STATS_FILE"
SELECT
	CASE
		WHEN ( (SELECT value FROM sysmaster:sysprofile WHERE name = 'bufreads') = 0 ) THEN
			0
		ELSE
		        ( 100 - TRUNC( (SELECT value FROM sysmaster:sysprofile WHERE name = 'dskreads') / (SELECT value FROM sysmaster:sysprofile WHERE name = 'bufreads') * 100 ,2 )) 
	END percent_read,

	CASE
		WHEN ( (SELECT value FROM sysmaster:sysprofile WHERE name = 'bufwrites') = 0 ) THEN
			0
		ELSE
		        ( 100 - TRUNC( (SELECT value FROM sysmaster:sysprofile WHERE name = 'dskwrites') / (SELECT value FROM sysmaster:sysprofile WHERE name = 'bufwrites') * 100 ,2 ))
	END percent_writes,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'btradata' ) ra_btree_data,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'btraidx' )  ra_btree,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'dpra' ) ra_data,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'rapgs_used' ) ra_pages_used,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'bufreads' ) bufreads,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'dskreads' ) dskreads,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'bufwrites' ) bufwrites,
        ( SELECT value FROM sysmaster:sysprofile WHERE name = 'dskwrites' ) dskwrites
FROM sysmaster:systables WHERE tabid = 1;
EOF
	if [ $? != 0 ]
	then
		echo "$PROGNAME: Error - Error selecting profile stats" >&2
		cat $TMP_ERROR_FILE >&2
		exit 1
	fi

	awk -F'|' '
	function max_length(value, size)
	{
		currentsize=length(value);
		if ( currentsize <= size )
			return(value);
		targetsize=size-2;
		resp="";
		if ( targetsize <= 0)
		{
			for (f=1;f<=size;f++)
				resp=sprintf("%s%c",resp,"*");
			return(resp);
		}
		else
		{
			exponent=currentsize - targetsize;
			targetvalue=value / (10**(exponent));
			resp=substr(targetvalue,1,targetsize) "e" exponent;
			return(resp);
		}
	}

	BEGIN {
		printf "\n\nProfile statistics:\n%-10s %-10s %-11s %-11s %-12s %-13s %-15s %-14s %-13s %-13s\n", "Buff Reads", "Disk Reads", "Buff Writes", "Disk Writes", "%cache reads", "%cache writes","RA Idx/Da Pages","RA Index Pages", "RA Data pages", "RA Pages Used";
		printf "---------- ---------- ----------- ----------- ------------ ------------- --------------- -------------- ------------- -------------\n";
	}
	{
		MY_percent_read=$1;
		MY_percent_writes=$2;
		MY_ra_btree_data=$3;
		MY_ra_btree=$4;
		MY_ra_data=$5;
		MY_ra_used=$6;
		MY_bufreads=$7;
		MY_dskreads=$8;
		MY_bufwrites=$9;
		MY_dskwrites=$10;
		printf "%-10s %-10s %-11s %-11s %-12s %-13s %-15s %-14s %-13s %-13s\n",
		max_length(MY_bufreads,10),
		max_length(MY_dskreads,10),
		max_length(MY_bufwrites,11),
		max_length(MY_dskwrites,11),
		max_length(MY_percent_read,12),
		max_length(MY_percent_writes,13),
		max_length(MY_ra_btree_data,15),
		max_length(MY_ra_btree,14),
		max_length(MY_ra_data,13),
		max_length(MY_ra_used,13);
	}' $MY_STATS_FILE
	fi

}

clean_up()
{
	rm -f $MY_STATS_FILE $MY_SQL_SCRIPT $TMP_ERROR_FILE
	if [ "X${EXPLAIN_FLAG}" = "X1" ]
	then
		rm -f $EXPLAIN_FILE
	fi
}

#START
T_TAB_NAME=ixprof_tmp
IO_FLAG=0
WAIT_FLAG=0
EXPLAIN_FLAG=0
SCRIPT=$0
PROGNAME=`basename $0`
VERSION=`echo "$Revision: 2.0.42 $" | cut -f2 -d' '`
MY_STATS_FILE=/tmp/${PROGNAME}_partitions_$$.tmp
MY_SQL_SCRIPT=/tmp/${PROGNAME}_$$.sql
TMP_ERROR_FILE=/tmp/${PROGNAME}_$$.err
RESETSTATS_FLAG=1
trap clean_up 0

get_args $*
RC=$?
if [ $RC != 0 ]
then
	ix_help >&2
	exit $RC
fi

if [ "X${EXPLAIN_FLAG}" = "X1" ]
then
	EXPLAIN_FILE=/tmp/${PROGNAME}_$$.expl
fi

if [ "X$SQL_SCRIPT_FLAG" = "X1" ]
then

	awk -v SCRIPT=$SCRIPT -v DATABASE=$DATABASE -v PID=$$ -v RESETSTATS=$RESETSTATS_FLAG -v ERROR_FILE=$TMP_ERROR_FILE -v WAIT_FLAG=$WAIT_FLAG -v IO_FLAG=$IO_FLAG -v PROFILE_FLAG=$PROFILE_FLAG -v TSTAMP_FLAG=$TSTAMP_FLAG -v T_TAB_NAME=$T_TAB_NAME -v EXPLAIN_FLAG=$EXPLAIN_FLAG -v EXPLAIN_FILE=$EXPLAIN_FILE '
		BEGIN {
			if ( RESETSTATS == 1 )
				RESETSTATS_CLAUSE="!onstat -z 2>" ERROR_FILE "  1>&2; if [ $? = 0 ]; then echo Engine statistics RESETed. Query results:;else echo Could not RESET engine stats!;cat " ERROR_FILE ";fi";
			else
				if (RESETSTATS == 2 )
					RESETSTATS_CLAUSE="!echo \"execute function admin(\\\"onstat\\\",\\\"-z\\\");\" | dbaccess sysadmin 2>" ERROR_FILE " 1>&2; if [ $? = 0 ]; then echo Engine statistics RESETed. Query results:;else echo Could not RESET engine stats!;cat " ERROR_FILE ";fi";
				else
					RESETSTATS_CLAUSE="";
			printf "%s\n", RESETSTATS_CLAUSE;

			if ( WAIT_FLAG == 1 )
				EXTRA_FLAGS="-w";
			if ( IO_FLAG == 1 )
				EXTRA_FLAGS=EXTRA_FLAGS " -i";
			if ( PROFILE_FLAG == 1 )
				EXTRA_FLAGS=EXTRA_FLAGS " -p";
			
			
			if (TSTAMP_FLAG == 1)
			{
				printf "-- To obtain time\nCREATE TEMP TABLE %s (start DATETIME YEAR TO FRACTION(3)); INSERT INTO %s VALUES(CURRENT YEAR TO FRACTION(3));\n\n", T_TAB_NAME, T_TAB_NAME;
				TIMING_SQL="SELECT \"Query execution time: \" || CURRENT YEAR TO FRACTION(3) - start FROM " T_TAB_NAME ";"
			}
			else
				TIMING_SQL="";

			if ( EXPLAIN_FLAG == 1 || EXPLAIN_FLAG == 2)
			{
				printf "SET EXPLAIN FILE TO \"%s\";\nSET EXPLAIN ON;\n", EXPLAIN_FILE
			}
		}
		{
			if ( toupper($0) ~ /[ 	]*--[ 	]*QUERY/ )
			{
				if (EXPLAIN_FLAG == 1)
				{
					printf "SET EXPLAIN OFF;\n"
					printf "!cat %s;rm -f %s\n", EXPLAIN_FILE, EXPLAIN_FILE;
				}
				if (EXPLAIN_FLAG == 2)
				{
					printf "SET EXPLAIN OFF;\n"
				}
				if (TSTAMP_FLAG == 1)
				{
					printf "%s\n!%s %s -S %s\n!echo;echo ====================================================================================================================================;echo QUERY BREAK;echo ====================================================================================================================================;echo\n%s\nUPDATE %s SET start = CURRENT YEAR TO FRACTION(3);\n-- QUERY\n",TIMING_SQL,SCRIPT, EXTRA_FLAGS, DATABASE,RESETSTATS_CLAUSE,T_TAB_NAME;
				}
				else
				{
					printf "%s\n!%s %s -S %s\n!echo;echo ====================================================================================================================================;echo QUERY BREAK;echo ====================================================================================================================================;echo\n%s\n-- QUERY\n",TIMING_SQL,SCRIPT, EXTRA_FLAGS, DATABASE,RESETSTATS_CLAUSE;
				}

				if ( (EXPLAIN_FLAG == 1) || (EXPLAIN_FLAG == 2) )
				{
					printf "SET EXPLAIN FILE TO \"%s\";\nSET EXPLAIN ON;\n",EXPLAIN_FILE;
				}
			}
			else
				print $0
		}
		END {
			if ( (EXPLAIN_FLAG == 1) || (EXPLAIN_FLAG == 2) )
			{
				printf "SET EXPLAIN OFF;\n"
			}

			printf "%s\n!%s %s -S %s\n",TIMING_SQL,SCRIPT,EXTRA_FLAGS, DATABASE;
			if (EXPLAIN_FLAG == 2)
			{
				printf "!echo Explain plans were written to file %s\n", EXPLAIN_FILE;
			}
			if (EXPLAIN_FLAG == 1)
			{
				printf "!cat %s\n", EXPLAIN_FILE;
			}
		}' $SQL_SCRIPT > $MY_SQL_SCRIPT;

	if [ "X$TSTAMP_FLAG" = "X1" ]
	then
		dbaccess $DATABASE $MY_SQL_SCRIPT 2>$TMP_ERROR_FILE
		if [ $? != 0 ]
		then
			printf "%s error calling dbaccess:\n" $PROGNAME
			cat $TMP_ERROR_FILE
		fi
	else
		time dbaccess $DATABASE $MY_SQL_SCRIPT 2>$TMP_ERROR_FILE
		if [ $? != 0 ]
		then
			printf "%s error calling dbaccess:\n" $PROGNAME
			cat $TMP_ERROR_FILE
		fi
	fi
	exit 0
fi

if [ "X$SESSION_FLAG" = "X1" ]
then
	MY_STATS_FILE=/tmp/$PROGNAME_partitions_$$.tmp
	trap clean_up 0
	get_stats
fi

if [ "X$SESSION_FLAG" = "X2" ]
then
	get_stats
fi
