#!/bin/bash
# Copyright (c) 2002-2016 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision: 2.0.54 $
# $Date: 2021-03-07 22:07:07 $
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.

show_help()
{
	echo "${PROGNAME}:  ${PROGNAME} [ -h | -V ] | ">&2
	echo "  [-t <number>] [[ -C ] [-n <interactions>] [-c <min-runs>] [-r|-R|-I|-B|-L|-M|-E <regexp] [-e cmd [-f file]]]" >&2
	echo "  [-t <number>] [-H <bold>|<none>][ -p <part_order_by> [ -d <database_list> ] [ -T <table_list> ]]" >&2
	echo "  [-t <number>] [ -s | -l  <ses_order_by> [ -u <user_list> ] ]" >&2
	echo "  [-t <number>] [ -m ]" >&2
	echo " Where: " >&2
	echo " -t <number>               : limits the output to "number" of lines/objects" >&2
	echo " -C : Get TOP sessions by condition">&2
	echo "      -n <interactions>    : nuber of onstat -g ath to trace [default=20]" >&2
	echo "      -c <min-runs>        : minimum ocurrences of the thread in the active list [default=2]" >&2
	echo "      -r                   : running sessions" >&2
	echo "      -R                   : running and ready sessions (default)" >&2
	echo "      -I                   : IO Wait sessions" >&2
	echo "      -B                   : bufwait sessions" >&2
	echo "      -L                   : lockwait sessions" >&2
	echo "      -M                   : mutex wait" >&2
	echo "      -d <database_list>   : list of databases to show" >&2
	echo "      -T <table_list>      : list of tables to show" >&2
	echo "      -E <regexp>          : Whatever you want expressed as a regexp. Ex: (running|IO Wait)" >&2
	echo "      -e <ses|sql|stm|stq|ixses> : executes the cmd command with SID as a parameter for each session found" >&2
	echo "      -f <file>            : sends the output of cmd to the specified file">&2
	echo " -p : Get TOP I/O, locks, lockwaits, buffer activity etc. per partition">&2
	echo "      <database_list> : comma separated list of databases ">&2
	echo "      <part_order_by> : field to order by: ">&2
	echo "                       [Database|Partname|PartNumHex|Partnum|LockReqs|LkWai|DLk|LkT|IsamReads|">&2
	echo "                       IsamWrite|IsamRWrit|IsamDel|BuffReads|BuffWrit|PagReads|PagWrite|SeqScans]">&2
	echo " -P : Get TOP partitions on buffer cache" >&2
	echo " -s : Get TOP I/O, buffer activity etc. per session" >&2
	echo "      <ses_order_by>  : field to order by: ">&2 
	echo "                       [IsamReads|IsamWrite|IsamRWrit|IsamDels|IsamCommt|IsamRB|LTx|BuffReads|">&2
	echo "                       BuffWrite|SeqScans|PagRead|PagWrit|TotSrt|DSrt|MaxDSpc]">&2
	echo " -l : Get TOP locks, lockwaits, logs, logspace usage etc. per session" >&2
	echo "      <ses_order_by>  : field to order by: ">&2 
	echo "                       [LockReqs|LkHeld|LkWait|DLk|LkTout|LogRecs|Log%Use|MaxLgSpc]">&2
	echo "      <user_list>     : comma separated list of users">&2
	echo " -m : Get TOP memory usage sessions" >&2
	echo " -H : Highlight mode: none or bold (default)" >&2



}

show_version()
{
	echo "${PROGNAME}: Version ${VERSION}"
}
get_args()
{
	arg_ok="hVt:Cn:c:s:l:p:u:d:T:mH:rRIBLME:e:f:P"

	while getopts ${arg_ok} OPTION
	do
		case ${OPTION} in
		h)   # show help
			show_help
			exit 0
			;;
		V)	#show version
			show_version
			exit 0
			;;
		t)     #define top size...
			if [ "X"${TOP_SIZE_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			TOP_SIZE_FLAG=1
			TOP_SIZE=${OPTARG}
			;;
		C)     #flag for cpu TOP
			if [ "X"${CONDITION_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			CONDITION_FLAG=1
			;;
		r)	# running threads
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR=running
			THREAD_DESC="sessions in running state"
			;;
		R)	# running and ready threads
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR="(running|ready)"
			THREAD_DESC="sessions in running or ready state"
			;;
		I)	# IO Wait threads
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR="IO Wait"
			THREAD_DESC="sessions in IO Wait state"
			;;
		B)	# bufwait threads
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR=bufwait
			THREAD_DESC="sessions waiting for buffers"
			;;
		L)	# lock wait threads
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR=lockwait
			THREAD_DESC="sessions waiting for locks"
			;;
		M)	# Mutex wait threads
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR="mutex wait"
			THREAD_DESC="sessions in mutex wait"
			;;
		E)	# custom status
			if [ "X${THREAD_STATUS_FLAG}" = "X1" ]
			then
				echo "Error: Option to filter session status already processed" >&2
				exit 1
			fi
			THREAD_STATUS_FLAG=1
			THREAD_STATUS_EXPR="$OPTARG"
			THREAD_DESC="sessions in custom state expressed by regular expression: $THREAD_STATUS_EXPR"
			;;
		e)	# execute a command for each session
			THREAD_CMD_FLAG=1
			THREAD_CMD_EXE="$OPTARG"
			echo $THREAD_CMD_EXE | egrep -e "^(ses|sql|stm|stq|ixses)$" >/dev/null
			if [ $? != 0 ]
			then
				echo "Error: Invalid choice ($THREAD_CMD_EXE) for option -e" >&2
				exit 1
			fi
			;;
		f)	#Output file
			THREAD_OUTPUT_FILE_FLAG=1
			THREAD_OUTPUT_FILE=${OPTARG}
			if [ ! -w ${THREAD_OUTPUT_FILE} -a ! -w `dirname ${THREAD_OUTPUT_FILE}` ]
			then
				echo "Error: Specified file (${THREAD_OUTPUT_FILE}) cannot be written to">&2
				exit 1
			fi
			;;
		H)     # highligth mode
			if [ "X${HIGHLIGHT_FLAG}" = "X1" ]
			then
				echo "Error: Option ${OPTION} alrady processed" >&2
				exit 1
			fi
			HIGHLIGHT_FLAG=1
			OPTARG=`echo $OPTARG | tr "[:lower:]" "[:upper:]"`
			case $OPTARG in
			NONE|BOLD)
				HIGHLIGHT_MODE=$OPTARG
				;;
			*)
				echo "Error: Invalid mode ($OPTARG) for highlight mode" >&2
				exit 1
			esac
			;;
		p)     #flag for partition TOP
			if [ "X"${PARTITION_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			PARTITION_FLAG=1
			OPTARG=`echo $OPTARG | tr "[:lower:]" "[:upper:]"`
			case $OPTARG in
			DATABASE)
				PARTITION_ORDER_BY=pf.dbsname
				;;
			PARTNAME)
				PARTITION_ORDER_BY=pf.tabname
				;;
			PARTNUMHEX)
				PARTITION_ORDER_BY=partnum
				;;
			PARTNUM)
				PARTITION_ORDER_BY=4
				;;
			LOCKREQS)
				PARTITION_ORDER_BY=lockreqs
				;;
			LKWAI)
				PARTITION_ORDER_BY=lockwts
				;;
			DLK)
				PARTITION_ORDER_BY=deadlks
				;;
			LKT)
				PARTITION_ORDER_BY=lktouts
				;;
			ISAMREADS)
				PARTITION_ORDER_BY=isreads
				;;
			ISAMWRITE)
				PARTITION_ORDER_BY=iswrites
				;;
			ISAMRWRIT)
				PARTITION_ORDER_BY=isrewrites
				;;
			ISAMDEL)
				PARTITION_ORDER_BY=isdeletes
				;;
			BUFFREADS)
				PARTITION_ORDER_BY=bufreads
				;;
			BUFFWRIT)
				PARTITION_ORDER_BY=bufwrites
				;;
			PAGREADS)
				PARTITION_ORDER_BY=pagreads
				;;
			PAGWRITE)
				PARTITION_ORDER_BY=pagwrites
				;;
			SEQSCANS)
				PARTITION_ORDER_BY=seqscans
				;;
			*)
				echo "Invalid order by clause..." >&2
				exit 1
				;;
                        esac
			;;
		P)     #flag for cache TOP
			if [ "X${CACHE_FLAG}" = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			CACHE_FLAG=1
			;;
		s)     #flag for session TOP
			if [ "X"${SESSION_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			SESSION_FLAG=1
			OPTARG=`echo $OPTARG | tr "[:lower:]" "[:upper:]"`	
			SESSION_ORDER_BY=${OPTARG}
			case $OPTARG in
			ISAMREADS)
				SESSION_ORDER_BY=isreads
				;;
			ISAMWRITE)
				SESSION_ORDER_BY=iswrites
				;;
			ISAMRWRIT )
				SESSION_ORDER_BY=isrewrites
				;;
			ISAMDELS)
				SESSION_ORDER_BY=isdeletes
				;;
			ISAMCOMMT)
				SESSION_ORDER_BY=iscommits
				;;
			ISAMRB)
				SESSION_ORDER_BY=isrollbacks
				;;
			LTX)
				SESSION_ORDER_BY=longtxs
				;;
			BUFFREADS)
				SESSION_ORDER_BY=bufreads
				;;
			BUFFWRITE)
				SESSION_ORDER_BY=bufwrites
				;;
			SEQSCANS)
				SESSION_ORDER_BY=seqscans
				;;
			PAGREAD)
				SESSION_ORDER_BY=pagreads
				;;
			PAGWRIT)
				SESSION_ORDER_BY=pagwrites
				;;
			TOTSRT)
				SESSION_ORDER_BY=total_sorts
				;;
			DSRT)
				SESSION_ORDER_BY=dsksorts
				;;
			MAXDSPC)
				SESSION_ORDER_BY=max_sortdiskspace
				;;
			*)
				echo "Invalid order by clause..." >&2
				exit 1
				;;
			esac
			;;
		l)     #flag for session (l) TOP
			if [ "X"${SESSION_L_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			SESSION_L_FLAG=1
			OPTARG=`echo $OPTARG | tr '[:lower:]' '[:upper:]'`
			case $OPTARG in
			LOCKREQS)
				SESSION_ORDER_BY=lockreqs
				;;
			LKHELD)
				SESSION_ORDER_BY=locksheld
				;;
		 	LKWAIT)
				SESSION_ORDER_BY=lockwts
				;;
			DLk)
				SESSION_ORDER_BY=deadlks
				;;
			LKTOUT)
				SESSION_ORDER_BY=lktouts
				;;
			LOGRECS)
				SESSION_ORDER_BY=logrecs
				;;
			LOG%USE)
				SESSION_ORDER_BY=logspused
				;;
			MAXLGSPC)
				SESSION_ORDER_BY=maxlogsp
				;;
			*)
				echo "Invalid order by clause..." >&2
				exit 1
				;;
			esac
			;;
		m)     #flag memory usage TOP
			if [ "X"${MEMORY_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			MEMORY_FLAG=1
			;;
		d)     #flag partition DB list
			if [ "X"${PARTITION_DB_LIST_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			PARTITION_DB_LIST_FLAG=1
			PARTITION_DB_LIST=${OPTARG}
			;;
		T)     #flag partition table list
			if [ "X"${PARTITION_TABLE_LIST_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			PARTITION_TABLE_LIST_FLAG=1
			PARTITION_TABLE_LIST=${OPTARG}
			;;
		u)     #session user list
			if [ "X${USER_LIST_FLAG}" = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			USER_LIST_FLAG=1
			USER_LIST=${OPTARG}
			;;
		n)     #flag CPU number of onstat -g act INTERACTIONS
			if [ "X${CONDITION_INTERACTIONS_FLAG}" = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			CONDITION_INTERACTIONS_FLAG=1
			CONDITION_INTERACTIONS=${OPTARG}
			;;
		c)     #flag CPU minimum number of OCURRENCES
			if [ "X"${CONDITION_MIN_OCURRENCES_FLAG} = "X1" ]
			then
				echo "Error: Option ${OPTION} already processed" >&2
				exit 1
			fi
			CONDITION_MIN_OCURRENCES_FLAG=1
			CONDITION_MIN_OCURRENCES=${OPTARG}
			;;
		*)
			echo "Error parsing arguments 1..." >&2
			return 1
			;;
    		esac
	done
}

top_cache()
{
#Buffer pool page size:
onstat -P | awk '
	/Buffer pool page size:/ {BUFFSIZE=$NF}
	/partnum/,/^$/ {print $1"|"$2"|"$3"|"$4"|"$5"|"$6"|"BUFFSIZE}' | egrep -v -e "partnum|\|\|\|\|" > $TEMP_FILE
dbaccess sysmaster <<EOF 2>${TEMP_DBACCESS_FILE}
CREATE TEMP TABLE run_all_cache_usage
(
        partnum INTEGER,
        total INTEGER,
        btree INTEGER,
        data INTEGER,
        other INTEGER,
        dirty INTEGER,
	buffsize INTEGER
) WITH NO LOG;

LOAD FROM $TEMP_FILE INSERT INTO run_all_cache_usage;

UNLOAD TO $TEMP_FILE
SELECT
	$FIRST_CLAUSE
        NVL(
                (TRIM(t.dbsname)||':'||TRIM(TRAILING FROM t.tabname)),
                'UNKNOWN:'||my.partnum
        ),
        my.total,
        my.btree,
        my.data,
        my.other,
        my.dirty,
	my.buffsize
FROM run_all_cache_usage my, outer systabnames t
WHERE my.partnum = t.partnum
ORDER BY 2 DESC;
EOF

	RC=$?
	if [ $RC != 0 ]
	then
		printf "Error calling dbaccess (get buffer cache usage data): %s\nError message:\n" $RC >&2
		cat ${TEMP_DBACCESS_FILE} >&2
		exit 1
	fi

awk -F'|' 'BEGIN {
printf "%-70s %-10s %-10s %-10s %-10s %-10s %-5s\n", "Database:Table", "Total", "BTree", "Data", "Other", "Dirty", "BSize"
printf "---------------------------------------------------------------------- ---------- ---------- ---------- ---------- ---------- -----\n";
}
{
        printf "%-70s %-10s %-10s %-10s %-10s %-10s %-5s\n", $1, $2, $3, $4, $5, $6, $7;
}' $TEMP_FILE

}


top_partition()
{

	if [ "X${PARTITION_TABLE_LIST_FLAG}" = "X1" ]
	then
		TABLE_CLAUSE=`echo ${PARTITION_TABLE_LIST} | ${AWK} -F',' 'BEGIN { printf "AND t.tabname IN ( ";}
		{
			for (f=1;f<=NF;f++)
			{
		                if (f<NF)
					{printf "\"%s\",",$f}
				else
					{printf "\"%s\"",$f}
			}
		}
		END {printf " )"}'`
		
	else
		TABLE_CLAUSE=""
	fi

	if [ "X${PARTITION_DB_LIST_FLAG}" = "X1" ]
	then
		DATABASE_CLAUSE=`echo ${PARTITION_DB_LIST} | ${AWK} -F',' 'BEGIN { printf "AND t.dbsname IN ( ";}
		{
			for (f=1;f<=NF;f++)
			{
		                if (f<NF)
					{printf "\"%s\",",$f}
				else
					{printf "\"%s\"",$f}
			}
		}
		END {printf " )"}'`
		
	else
		DATABASE_CLAUSE=""
	fi

	cat /dev/null > ${TEMP_FILE}
	dbaccess sysmaster <<EOF 2>${TEMP_DBACCESS_FILE}
unload to ${TEMP_FILE}
SELECT
	$FIRST_CLAUSE
	pf.dbsname, pf.tabname, pf.partnum, lower(hex(pf.partnum)),
	pf.lockreqs, pf.lockwts, pf.deadlks, pf.lktouts,
	pf.isreads, pf.iswrites, pf.isrewrites, pf.isdeletes,
	pf.bufreads, pf.bufwrites,
	pf.pagreads, pf.pagwrites,
	pf.seqscans, t.tabname,
	case
		when pt.nrows = 0 and pt.nkeys != 0
		then
			"INDEX"
		else
			"PARTITION"
	end
FROM
	sysptprof pf, sysptnhdr pt, systabnames t
WHERE
        (
	pf.lockreqs != 0 OR pf.lockwts != 0 OR pf.deadlks != 0 OR pf.lktouts != 0 OR
	pf.isreads != 0 OR pf.iswrites != 0 OR pf.isrewrites != 0 OR pf.isdeletes != 0 OR
	pf.bufreads != 0 OR pf.bufwrites != 0 OR pf.pagreads != 0 OR pf.pagwrites != 0 OR pf.seqscans != 0
        ) AND
	pt.partnum = pf.partnum AND
	t.partnum = pt.lockid
	${DATABASE_CLAUSE}
	${TABLE_CLAUSE}
ORDER BY ${PARTITION_ORDER_BY} DESC
EOF
	RC=$?
	if [ $RC != 0 ]
	then
		printf "Error calling dbaccess (get partition data): %s\nError message:\n" $RC >&2
		cat ${TEMP_DBACCESS_FILE} >&2
		exit 1
	fi
		

	${AWK} -F'|' -v HIGHLIGHT="$HIGHLIGHT_MODE" '

        function max_length(value, size)
        {
                currentsize=length(value);                 if ( currentsize <= size )                         return(value);
                targetsize=size-2;
                resp="";
                if ( targetsize <= 0)
                {
                        for (f=1;f<=size;f++)
                                resp=sprintf("%s%c",resp,"*");
                        return(resp);
                }
                else
		{
			exponent=currentsize - targetsize;
			if (exponent > 9)
				targetsize--;
			if (exponent > 99)
				targetsize--;
			if (targetsize < 1 )
			{
				for (f=1;f<=size;f++)
					resp=sprintf("%s%c",resp,"*");
			}
			else
				resp=substr(value,1,targetsize) "e" exponent;
			return(resp);
		}
        }
	BEGIN {
		if ( HIGHLIGHT == "NONE" )
		{
			HIGHLIGHT_INI="";
			HIGHLIGHT_END="";
		}
		else #BOLD
		{
			HIGHLIGHT_INI="[1m";
			HIGHLIGHT_END="[m";
		}
		printf("%s\n%-10s %-10s %-8s %-5s %-4s %-3s %-9s %-9s %-9s %-9s %-9s %-8s %-8s %-8s %-9s\n", "Database/Partname",
		"PartNumHex","Partnum   ","LockReqs","LkWai","DLk ","LkT","IsamReads","IsamWrite","IsamRWrit","IsamDel  ","BuffReads","BuffWrit","PagReads","PagWrite", "SeqScans ");
		printf("%-10s %-10s %-8s %-5s %-4s %-3s %-9s %-9s %-9s %-9s %-9s %-8s %-8s %-8s %-9s\n",
		"----------","----------","--------","-----","----","---","---------","---------","---------","---------","---------","--------","--------","--------", "---------");
	}
	{
		my_database=$1;
		my_partition=$2;
		my_partnum=$3;
		my_partnum_hex=$4;
		my_lockreqs=max_length($5,8);
		my_lockwts=max_length($6,5);
		my_deadlks=max_length($7,4);
		my_lktouts=max_length($8,3);
		my_isreads=max_length($9,9);
		my_iswrites=max_length($10,9);
		my_isrewrites=max_length($11,9);
		my_isdeletes=max_length($12,9);
		my_bufreads=max_length($13,9);
		my_bufwrites=max_length($14,8);
		my_pagreads=max_length($15,8);
		my_pagwrites=max_length($16,8);
		my_seqscans=max_length($17,9);
		my_tablename=$18;
		my_obj_type=$19;
		if ( my_tablename == my_partition)
		{
			printf("%s%s:%s%s\n%-10s %-10s %-8s %-5s %-4s %-3s %-9s %-9s %-9s %-9s %-9s %-8s %-8s %-8s %-9s\n", HIGHLIGHT_INI,my_database, my_partition,HIGHLIGHT_END, my_partnum_hex, my_partnum,my_lockreqs,my_lockwts,my_deadlks,my_lktouts,my_isreads,my_iswrites,my_isrewrites,my_isdeletes,my_bufreads,my_bufwrites,my_pagreads,my_pagwrites, my_seqscans);
		}
		else
		{
			if ( my_obj_type == "INDEX" )
				MY_SEP="#";
			else
				MY_SEP="@";
			printf("%s%s:%s%s%s%s\n%-10s %-10s %-8s %-5s %-4s %-3s %-9s %-9s %-9s %-9s %-9s %-8s %-8s %-8s %-9s\n", HIGHLIGHT_INI, my_database, my_tablename, MY_SEP, my_partition, HIGHLIGHT_END, my_partnum_hex, my_partnum,my_lockreqs,my_lockwts,my_deadlks,my_lktouts,my_isreads,my_iswrites,my_isrewrites,my_isdeletes,my_bufreads,my_bufwrites,my_pagreads,my_pagwrites, my_seqscans);
		}
	} ' ${TEMP_FILE}

}

top_session()
{
	TYPE=$1
	if [ "X${USER_LIST_FLAG}" = "X1" ]
	then
		USER_CLAUSE=`echo ${USER_LIST} | ${AWK} -F',' 'BEGIN { printf "AND t2.username IN ( ";}
		{
			for (f=1;f<=NF;f++)
			{
		                if (f<NF)
					{printf "\"%s\",",$f}
				else
					{printf "\"%s\"",$f}
			}
		}
		END {printf " )"}'`
		
	else
		USER_CLAUSE=""
	fi
	cat /dev/null > ${TEMP_FILE}
	dbaccess sysmaster <<EOF 2>${TEMP_DBACCESS_FILE}
unload to ${TEMP_FILE}
SELECT
	$FIRST_CLAUSE
	t1.sid::integer, t1.lockreqs::int8, t1.locksheld::int8, t1.lockwts::int8,
	t1.deadlks::int8, t1.lktouts::int8, t1.logrecs::int8, t1.isreads::int8,
	t1.iswrites::int8, t1.isrewrites::int8, t1.isdeletes::int8, t1.iscommits::int8,
	t1.isrollbacks::int8, t1.longtxs::int8, t1.bufreads::int8, t1.bufwrites::int8,
	t1.seqscans::int8, t1.pagreads::int8, t1.pagwrites::int8, t1.total_sorts::int8,
	t1.dsksorts::int8, t1.max_sortdiskspace::int8, t1.logspused::int8, t1.maxlogsp::int8,
	t2.username, t2.hostname, t2.cwd, DBINFO('utc_to_datetime',t2.connected),t2.progname, t2.pid
FROM
	syssesprof t1, sysscblst t2
WHERE
	t1.sid = t2.sid
	$USER_CLAUSE
ORDER BY
	${SESSION_ORDER_BY} DESC
EOF

	RC=$?
	if [ $RC != 0 ]
	then
		printf "Error calling dbaccess (get session data): %s\nError message:\n" $RC >&2
		cat ${TEMP_DBACCESS_FILE} >&2
		exit 1
	fi
	${AWK} -F'|' -v "type=$TYPE" '

        function max_length(value, size)
        {
                currentsize=length(value);                 if ( currentsize <= size )                         return(value);
                targetsize=size-2;
                resp="";
                if ( targetsize <= 0)
                {
                        for (f=1;f<=size;f++)
                                resp=sprintf("%s%c",resp,"*");
                        return(resp);
                }
                else
                {
			exponent=currentsize - targetsize;
			targetvalue=value / (10**(exponent));
                        resp=substr(targetvalue,1,targetsize) "e" exponent;
                        return(resp);
		} 
        }
	BEGIN {
		if (type == "l")
		{
			printf("%-34s %-8s/%-8s %-19s %-8s %-6s %-6s %-3s %-6s %-8s %-7s %-8s\n","Username@hostname                 ","SID     ","PID     ", "Connected          ","LockReqs","LkHeld","LkWait","DLk", "LkTout", "LogRecs ","Log%Use","MaxLgSpc");
			printf("%-34s %-8s/%-8s %-19s %-8s %-6s %-6s %-3s %-6s %-8s %-7s %-8s\n","----------------------------------","--------","------  ", "-------------------","--------","------","------","---", "------", "--------","-------","--------");
		}

		if (type == "s")
		{
			printf("%-34s %-8s/%-8s %-19s\n","Username@hostname                 ","SID     ","PID     ", "Connected          ");
			printf("%-9s %-9s %-9s %-9s %-9s %-6s %-3s %-9s %-9s %-9s %-7s %-7s %-6s %-5s %-8s\n", "IsamReads", "IsamWrite","IsamRWrit", "IsamDels ", "IsamCommt", "IsamRB", "LTx", "BuffReads", "BuffWrite", "SeqScans ", "PagRead", "PagWrit", "TotSrt", "DSrt ","MaxDSpc " );

			printf("%-9s %-9s %-9s %-9s %-9s %-6s %-3s %-9s %-9s %-9s %-7s %-7s %-6s %-5s %-8s\n", "---------", "---------","---------", "---------", "---------", "------", "---", "---------", "---------", "---------", "-------", "-------", "------", "-----","--------" );
		}
		
	}
	{
		my_sid=$1;
		my_lockreqs=max_length($2,8);
		my_locksheld=max_length($3,6);
		my_lockwts=max_length($4,6);
		my_deadlks=max_length($5,3);
		my_lktouts=max_length($6,6);
		my_logrecs=max_length($7,8);
		my_isreads=max_length($8,9);
		my_iswrites=max_length($9,9);
		my_isrewrites=max_length($10,9);
		my_isdeletes=max_length($11,9);
		my_iscommits=max_length($12,9);
		my_isrollbacks=max_length($13,6);
		my_longtxs=max_length($14,3);
		my_bufreads=max_length($15,9);
		my_bufwrites=max_length($16,9);
		my_seqscans=max_length($17,9);
		my_pagreads=max_length($18,7);
		my_pagwrites=max_length($19,7);
		my_total_sorts=max_length($20,6);
		my_dsksorts=max_length($21,5);
		my_max_sortdiskspace=max_length($22,8);
		my_logspused=max_length($23,7);
		my_maxlogsp=max_length($24,8);
		my_username=$25;
		my_hostname=$26;
		my_cwd=$27;
		my_connected=$28;
		my_progname=$29;
		my_pid=$30;

		my_temp=sprintf("%s@%s", my_username,my_hostname);
		if (type == "l")
		{
			printf("%-34s %-8s/%-8s %-19s %-8s %-6s %-6s %-3s %-6s %-8s %-7s %-8s\n",my_temp,my_sid,my_pid,my_connected,my_lockreqs, my_locksheld, my_lockwts, my_deadlks, my_lktouts, my_logrecs, my_logspused, my_maxlogsp );
		}
		if (type == "s")
		{
			printf("%-34s %-8s/%-8s %-19s\n",my_temp,my_sid, my_pid, my_connected);
			printf("%-9s %-9s %-9s %-9s %-9s %-6s %-3s %-9s %-9s %-9s %-7s %-7s %-6s %-5s %-8s\n",
my_isreads, my_iswrites, my_isrewrites, my_isdeletes, my_iscommits, my_isrollbacks, my_longtxs, my_bufreads, my_bufwrites, my_seqscans, my_pagreads, my_pagwrites, my_total_sorts, my_dsksorts, my_max_sortdiskspace);
		}
	} ' ${TEMP_FILE}
}

top_memory()
{
	echo TOP memory not implemented yet... sorry!
}

top_condition()
{
	HOSTNAME=`hostname | cut -f1 -d'.'`

	cat /dev/null > ${TEMP_FILE}

	CONT=1
	while true
	do
		if [ ${CONT} -gt ${CONDITION_INTERACTIONS} ]
		then
			break
		fi
		echo ath
		CONT=`expr $CONT + 1`
	done | onstat -i |  egrep -e "$THREAD_STATUS_EXPR" | ${AWK} '$1 ~ "^ *[1-9]" {
		if ( length($1) <=8 )
		{
			if ( $3 != 0) print $1 "|"
		}
		else
			if ($2 != 0 ) {
				MYSEP=substr($2,1,5);
				print substr($1,1,match($1,MYSEP)-1) "|";
                        }

		}' >> ${TEMP_FILE}
#cat ${TEMP_FILE}


	dbaccess sysmaster <<EOF 2>${TEMP_DBACCESS_FILE}

CREATE TEMP TABLE tmp_ixtop (col1 char(10)) WITH NO LOG;
LOAD FROM ${TEMP_FILE} INSERT INTO tmp_ixtop;
UNLOAD TO ${TEMP_FILE} DELIMITER " " SELECT
	$FIRST_CLAUSE
	TRUNC(COUNT(*)) Exec,
	a.sid,
	a.username as user,
	a.pid,
	a.hostname as host
FROM
	tmp_ixtop x, sysscblst a, sysrstcb b
WHERE
	a.address = b.scb AND
--	a.addresspad = b.scbpad AND
	bitval(b.flags, '0x80000') = 1 AND
	b.tid = x.col1
	GROUP BY 2,3,4,5 HAVING COUNT(*)>=${CONDITION_MIN_OCURRENCES} ORDER BY 1 DESC
EOF
	RC=$?
	if [ $RC != 0 ]
	then
		printf "Error calling dbaccess (get relevant session data): %s\nError message:\n" $RC >&2
		cat ${TEMP_DBACCESS_FILE} >&2
		exit 1
	fi
	if [ "X$THREAD_CMD_FLAG" = "X1" ]
	then
		if [ "X$THREAD_OUTPUT_FILE_FLAG" = "X" ]
		then
			THREAD_OUTPUT_FILE="/dev/tty"
			printf "\n\n\n"
		fi
		if [ "X$THREAD_CMD_EXE" = "Xixses" ]
		then
			SESSION_LIST=""
			head -${TOP_SIZE} ${TEMP_FILE} | while read DUMMY SID DUMMY1
			do
				SESSION_LIST="$SESSION_LIST $SID"
			done
			ixses $SESSION_LIST >$THREAD_OUTPUT_FILE
		else
			head -${TOP_SIZE} ${TEMP_FILE} | while read DUMMY SID DUMMY1
			do
				echo $THREAD_CMD_EXE $SID
			done | onstat -i >$THREAD_OUTPUT_FILE
		fi
	fi

	if [ "X$THREAD_STATUS_FLAG" = "X" ]
	then
		THREAD_DESC="sessions in running or ready state"
	fi

	cat ${TEMP_FILE} | ${AWK} -v "PS_CMD=$PS_CMD" -v "HOSTNAME=$HOSTNAME" -v "THREAD_DESC=$THREAD_DESC" ' \

	BEGIN {
		first=1;
	}
	{
		if ( first == 1)
		{
			printf "Showing %s\n",THREAD_DESC;
			printf "Seen  SessionID Username           PID    Hostname           Process\n";
			printf "----- --------- ------------------ ------ ------------------ --------------------------------------------------\n";
			first=0;
		}

		my_seen=int($1);
		my_sessionid=$2;
		my_username=$3;
		my_pid=$4;
		my_hostname=$5;
		pos=match(my_hostname,"\\.");
		if (pos == 0)
		{
			my_host=$5;
		}
		else
		{
			my_host=substr(my_hostname,1,pos-1);
		}


		if (HOSTNAME == my_host)
		{
			if ( my_pid == -1 )
			{
				my_command = "Local Java process - not possible to identify (PID=-1)";
			}
			else
			{
				command=sprintf("%s -p %s", PS_CMD, my_pid);
				command | getline;
				command | getline;
				my_time=$1;
				my_command=$2 " " $3 " " $4;
				close(command);
			}
		}
		else
		{
			my_command="Remote command";
		}

		printf("%-5s %-9s %-18s %-6s %-18s %s\n", my_seen, my_sessionid, my_username, my_pid, my_hostname, my_command);
	}'
}


PROGNAME=`basename $0`
VERSION=`echo "$Revision: 2.0.54 $" | cut -f2 -d' '`

TEMP_DIR=/tmp
TEMP_FILE=${TEMP_DIR}/ixtop$$.tmp
TEMP_DBACCESS_FILE=${TEMP_DIR}/ixtop_dbaccess$$.tmp
trap "rm -f ${TEMP_FILE} ${TEMP_DBACCESS_FILE}" 0
CONDITION_INTERACTIONS=20
CONDITION_MIN_OCURRENCES=2
TOP_SIZE=10

get_args $*
if [ $? != 0 ]
then
	show_help
	exit 1
fi

SO=`uname -s | tr "[:upper:]" "[:lower:]"`
case $SO in
	sunos*)
		AWK=nawk
		PS_CMD="ps -o \"time,comm\""
		;;
	osf*)
		PS_CMD="ps -o \"time,cmd\""
		AWK=nawk
		;;
	hp-ux)
		PS_CMD="export UNIX_STD=2003;ps -o \"time,comm\""
		AWK=gawk
		;;
	aix)
		PS_CMD="ps -o \"time,args\""
		AWK=gawk
		;;
	linux|*)
		PS_CMD="ps -o \"time,cmd\""
		AWK=awk
		;;
esac

#fallback to an existing awk

type ${AWK} 2>/dev/null 1>/dev/null
RES=$?
if [ ${RES} != 0 ]
then
	AWK=awk
fi


if [ \( "X${PARTITION_TABLE_LIST_FLAG}" = "X1" -o "X${PARTITION_TABLE_LIST_FLAG}" = "X1" \) -a "X${PARTITION_FLAG}" = "X" ]
then
	printf "Error: Options -d and -t can only be used with -p\n" >&2
	exit 1
fi

if [ "X${HIGHLIGHT_FLAG}" = "X" ]
then
	HIGHLIGHT_MODE=BOLD
fi

if [ "X${TOP_SIZE_FLAG}" = "X1" ]
then
	FIRST_CLAUSE="FIRST ${TOP_SIZE}"
else
	FIRST_CLAUSE=""
fi

if [ "X${CONDITION_FLAG}" != "X1" -a  "X${SESSION_FLAG}" != "X1" -a "X${SESSION_L_FLAG}" != "X1" -a "X${MEMORY_FLAG}" != "X1" -a "X${PARTITION_FLAG}" != "X1" -a "X{CACHE_FLAG}" != "X1" ]
then
	CONDITION_FLAG=1
fi

if [ "X${CONDITION_FLAG}" = "X1" ]
then
	if [ "X$THREAD_STATUS_FLAG" = "X" ]
	then
		THREAD_STATUS_EXPR="(running|ready)"
	fi
	top_condition
fi

if [ "X${CACHE_FLAG}" = "X1" ]
then
	top_cache
fi

if [ "X${SESSION_FLAG}" = "X1" ]
then
	top_session s
fi

if [ "X${SESSION_L_FLAG}" = "X1" ]
then
	top_session l
fi

if [ "X${MEMORY_FLAG}" = "X1" ]
then
	top_memory
fi

if [ "X${PARTITION_FLAG}" = "X1" ]
then
	top_partition
fi
